package data

// Code generated by gen.py. DO NOT EDIT.

import (
	"reflect"

	"github.com/pkg/errors"
)

func newSeriesBuilder(col ColumnName, typ reflect.Type, mode materializedType) (seriesBuilder, error) {
	switch typ {
	case typeFloat64:
		return newSeriesBuilderFloat64(col, mode), nil
	case typeInt64:
		return newSeriesBuilderInt64(col, mode), nil
	case typeString:
		return newSeriesBuilderString(col, mode), nil
	case typeBool:
		return newSeriesBuilderBool(col, mode), nil
	case typeTimestampMillis:
		return newSeriesBuilderTimestampMillis(col, mode), nil
	case typeTimestampMicros:
		return newSeriesBuilderTimestampMicros(col, mode), nil
	default:
		return newFallbackSeriesBuilder(col, typ, mode)
	}
}

func newSeriesCopier(s *Series, iter iterator, mode materializedType) (seriesCopier, error) {
	switch s.typ {
	case typeFloat64:
		return newSeriesCopierFloat64(s, iter, mode), nil
	case typeInt64:
		return newSeriesCopierInt64(s, iter, mode), nil
	case typeString:
		return newSeriesCopierString(s, iter, mode), nil
	case typeBool:
		return newSeriesCopierBool(s, iter, mode), nil
	case typeTimestampMillis:
		return newSeriesCopierTimestampMillis(s, iter, mode), nil
	case typeTimestampMicros:
		return newSeriesCopierTimestampMicros(s, iter, mode), nil
	default:
		return newFallbackSeriesCopier(s, iter, mode)
	}
}

// float64

// seriesBuilderFloat64 is a typed series builder for float64
type seriesBuilderFloat64 interface {
	seriesBuilder
	AppendFloat64(value float64, notNull bool)
}

func newSeriesBuilderFloat64(col ColumnName, mode materializedType) seriesBuilderFloat64 {
	switch mode {
	case nativeSeries:
		return newNativeSeriesBuilderFloat64(col)
	case arrowSeries:
		return newArrowSeriesBuilderFloat64(col)
	default:
		panic(errors.Errorf("unknown materialized series type %v", mode))
	}
}

// copies a series: reads values from a source column iterator and writes them to a target column builder
type seriesCopierFloat64 struct {
	seriesBuilderFloat64
	iter iterFloat64
}

func newSeriesCopierFloat64(s *Series, iter iterator, mode materializedType) *seriesCopierFloat64 {
	// typed source series iterator
	typedIter, err := s.iterateFloat64(iter)
	if err != nil {
		panic(errors.Wrapf(err, "SHOULD NOT HAPPEN: column %s is not Float64", s.col))
	}

	// typed destination series builder
	builder := newSeriesBuilderFloat64(s.col, mode)

	return &seriesCopierFloat64{
		seriesBuilderFloat64: builder,
		iter:                 typedIter,
	}
}

func (c *seriesCopierFloat64) CopyValue() { c.AppendFloat64(c.iter.Float64()) }

// int64

// seriesBuilderInt64 is a typed series builder for int64
type seriesBuilderInt64 interface {
	seriesBuilder
	AppendInt64(value int64, notNull bool)
}

func newSeriesBuilderInt64(col ColumnName, mode materializedType) seriesBuilderInt64 {
	switch mode {
	case nativeSeries:
		return newNativeSeriesBuilderInt64(col)
	case arrowSeries:
		return newArrowSeriesBuilderInt64(col)
	default:
		panic(errors.Errorf("unknown materialized series type %v", mode))
	}
}

// copies a series: reads values from a source column iterator and writes them to a target column builder
type seriesCopierInt64 struct {
	seriesBuilderInt64
	iter iterInt64
}

func newSeriesCopierInt64(s *Series, iter iterator, mode materializedType) *seriesCopierInt64 {
	// typed source series iterator
	typedIter, err := s.iterateInt64(iter)
	if err != nil {
		panic(errors.Wrapf(err, "SHOULD NOT HAPPEN: column %s is not Int64", s.col))
	}

	// typed destination series builder
	builder := newSeriesBuilderInt64(s.col, mode)

	return &seriesCopierInt64{
		seriesBuilderInt64: builder,
		iter:               typedIter,
	}
}

func (c *seriesCopierInt64) CopyValue() { c.AppendInt64(c.iter.Int64()) }

// string

// seriesBuilderString is a typed series builder for string
type seriesBuilderString interface {
	seriesBuilder
	AppendString(value string, notNull bool)
}

func newSeriesBuilderString(col ColumnName, mode materializedType) seriesBuilderString {
	switch mode {
	case nativeSeries:
		return newNativeSeriesBuilderString(col)
	case arrowSeries:
		return newArrowSeriesBuilderString(col)
	default:
		panic(errors.Errorf("unknown materialized series type %v", mode))
	}
}

// copies a series: reads values from a source column iterator and writes them to a target column builder
type seriesCopierString struct {
	seriesBuilderString
	iter iterString
}

func newSeriesCopierString(s *Series, iter iterator, mode materializedType) *seriesCopierString {
	// typed source series iterator
	typedIter, err := s.iterateString(iter)
	if err != nil {
		panic(errors.Wrapf(err, "SHOULD NOT HAPPEN: column %s is not String", s.col))
	}

	// typed destination series builder
	builder := newSeriesBuilderString(s.col, mode)

	return &seriesCopierString{
		seriesBuilderString: builder,
		iter:                typedIter,
	}
}

func (c *seriesCopierString) CopyValue() { c.AppendString(c.iter.String()) }

// bool

// seriesBuilderBool is a typed series builder for bool
type seriesBuilderBool interface {
	seriesBuilder
	AppendBool(value bool, notNull bool)
}

func newSeriesBuilderBool(col ColumnName, mode materializedType) seriesBuilderBool {
	switch mode {
	case nativeSeries:
		return newNativeSeriesBuilderBool(col)
	case arrowSeries:
		return newArrowSeriesBuilderBool(col)
	default:
		panic(errors.Errorf("unknown materialized series type %v", mode))
	}
}

// copies a series: reads values from a source column iterator and writes them to a target column builder
type seriesCopierBool struct {
	seriesBuilderBool
	iter iterBool
}

func newSeriesCopierBool(s *Series, iter iterator, mode materializedType) *seriesCopierBool {
	// typed source series iterator
	typedIter, err := s.iterateBool(iter)
	if err != nil {
		panic(errors.Wrapf(err, "SHOULD NOT HAPPEN: column %s is not Bool", s.col))
	}

	// typed destination series builder
	builder := newSeriesBuilderBool(s.col, mode)

	return &seriesCopierBool{
		seriesBuilderBool: builder,
		iter:              typedIter,
	}
}

func (c *seriesCopierBool) CopyValue() { c.AppendBool(c.iter.Bool()) }

// TimestampMillis

// seriesBuilderTimestampMillis is a typed series builder for TimestampMillis
type seriesBuilderTimestampMillis interface {
	seriesBuilder
	AppendTimestampMillis(value TimestampMillis, notNull bool)
}

func newSeriesBuilderTimestampMillis(col ColumnName, mode materializedType) seriesBuilderTimestampMillis {
	switch mode {
	case nativeSeries:
		return newNativeSeriesBuilderTimestampMillis(col)
	case arrowSeries:
		return newArrowSeriesBuilderTimestampMillis(col)
	default:
		panic(errors.Errorf("unknown materialized series type %v", mode))
	}
}

// copies a series: reads values from a source column iterator and writes them to a target column builder
type seriesCopierTimestampMillis struct {
	seriesBuilderTimestampMillis
	iter iterTimestampMillis
}

func newSeriesCopierTimestampMillis(s *Series, iter iterator, mode materializedType) *seriesCopierTimestampMillis {
	// typed source series iterator
	typedIter, err := s.iterateTimestampMillis(iter)
	if err != nil {
		panic(errors.Wrapf(err, "SHOULD NOT HAPPEN: column %s is not TimestampMillis", s.col))
	}

	// typed destination series builder
	builder := newSeriesBuilderTimestampMillis(s.col, mode)

	return &seriesCopierTimestampMillis{
		seriesBuilderTimestampMillis: builder,
		iter:                         typedIter,
	}
}

func (c *seriesCopierTimestampMillis) CopyValue() { c.AppendTimestampMillis(c.iter.TimestampMillis()) }

// TimestampMicros

// seriesBuilderTimestampMicros is a typed series builder for TimestampMicros
type seriesBuilderTimestampMicros interface {
	seriesBuilder
	AppendTimestampMicros(value TimestampMicros, notNull bool)
}

func newSeriesBuilderTimestampMicros(col ColumnName, mode materializedType) seriesBuilderTimestampMicros {
	switch mode {
	case nativeSeries:
		return newNativeSeriesBuilderTimestampMicros(col)
	case arrowSeries:
		return newArrowSeriesBuilderTimestampMicros(col)
	default:
		panic(errors.Errorf("unknown materialized series type %v", mode))
	}
}

// copies a series: reads values from a source column iterator and writes them to a target column builder
type seriesCopierTimestampMicros struct {
	seriesBuilderTimestampMicros
	iter iterTimestampMicros
}

func newSeriesCopierTimestampMicros(s *Series, iter iterator, mode materializedType) *seriesCopierTimestampMicros {
	// typed source series iterator
	typedIter, err := s.iterateTimestampMicros(iter)
	if err != nil {
		panic(errors.Wrapf(err, "SHOULD NOT HAPPEN: column %s is not TimestampMicros", s.col))
	}

	// typed destination series builder
	builder := newSeriesBuilderTimestampMicros(s.col, mode)

	return &seriesCopierTimestampMicros{
		seriesBuilderTimestampMicros: builder,
		iter:                         typedIter,
	}
}

func (c *seriesCopierTimestampMicros) CopyValue() { c.AppendTimestampMicros(c.iter.TimestampMicros()) }
