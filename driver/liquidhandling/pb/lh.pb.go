// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lh.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	lh.proto

It has these top-level messages:
	AddPlateToRequest
	FinalizeRequest
	GetCapabilitiesRequest
	GetOutputFileRequest
	InitializeRequest
	MessageRequest
	RemoveAllPlatesRequest
	RemovePlateAtRequest
	AspirateRequest
	DispenseRequest
	LoadTipsRequest
	MixRequest
	MoveRequest
	ResetPistonsRequest
	SetDriveSpeedRequest
	SetPipetteSpeedRequest
	UnloadTipsRequest
	UpdateMetaDataRequest
	WaitRequest
	TransferRequest
	CommandReply
	GetCapabilitiesReply
	GetOutputFileReply
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddPlateToRequest struct {
	Position   string `protobuf:"bytes,1,opt,name=position" json:"position,omitempty"`
	Plate_JSON string `protobuf:"bytes,2,opt,name=plate_JSON,json=plateJSON" json:"plate_JSON,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *AddPlateToRequest) Reset()                    { *m = AddPlateToRequest{} }
func (m *AddPlateToRequest) String() string            { return proto.CompactTextString(m) }
func (*AddPlateToRequest) ProtoMessage()               {}
func (*AddPlateToRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddPlateToRequest) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *AddPlateToRequest) GetPlate_JSON() string {
	if m != nil {
		return m.Plate_JSON
	}
	return ""
}

func (m *AddPlateToRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type FinalizeRequest struct {
}

func (m *FinalizeRequest) Reset()                    { *m = FinalizeRequest{} }
func (m *FinalizeRequest) String() string            { return proto.CompactTextString(m) }
func (*FinalizeRequest) ProtoMessage()               {}
func (*FinalizeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetCapabilitiesRequest struct {
}

func (m *GetCapabilitiesRequest) Reset()                    { *m = GetCapabilitiesRequest{} }
func (m *GetCapabilitiesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCapabilitiesRequest) ProtoMessage()               {}
func (*GetCapabilitiesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GetOutputFileRequest struct {
}

func (m *GetOutputFileRequest) Reset()                    { *m = GetOutputFileRequest{} }
func (m *GetOutputFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetOutputFileRequest) ProtoMessage()               {}
func (*GetOutputFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type InitializeRequest struct {
}

func (m *InitializeRequest) Reset()                    { *m = InitializeRequest{} }
func (m *InitializeRequest) String() string            { return proto.CompactTextString(m) }
func (*InitializeRequest) ProtoMessage()               {}
func (*InitializeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type MessageRequest struct {
	Level      int32  `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
	Title      string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Text       string `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	ShowCancel bool   `protobuf:"varint,4,opt,name=show_cancel,json=showCancel" json:"show_cancel,omitempty"`
}

func (m *MessageRequest) Reset()                    { *m = MessageRequest{} }
func (m *MessageRequest) String() string            { return proto.CompactTextString(m) }
func (*MessageRequest) ProtoMessage()               {}
func (*MessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MessageRequest) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *MessageRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MessageRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MessageRequest) GetShowCancel() bool {
	if m != nil {
		return m.ShowCancel
	}
	return false
}

type RemoveAllPlatesRequest struct {
}

func (m *RemoveAllPlatesRequest) Reset()                    { *m = RemoveAllPlatesRequest{} }
func (m *RemoveAllPlatesRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveAllPlatesRequest) ProtoMessage()               {}
func (*RemoveAllPlatesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type RemovePlateAtRequest struct {
	Position string `protobuf:"bytes,1,opt,name=position" json:"position,omitempty"`
}

func (m *RemovePlateAtRequest) Reset()                    { *m = RemovePlateAtRequest{} }
func (m *RemovePlateAtRequest) String() string            { return proto.CompactTextString(m) }
func (*RemovePlateAtRequest) ProtoMessage()               {}
func (*RemovePlateAtRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RemovePlateAtRequest) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

type AspirateRequest struct {
	Volume     []float64 `protobuf:"fixed64,1,rep,packed,name=volume" json:"volume,omitempty"`
	Overstroke []bool    `protobuf:"varint,2,rep,packed,name=overstroke" json:"overstroke,omitempty"`
	Head       int32     `protobuf:"varint,3,opt,name=head" json:"head,omitempty"`
	Multi      int32     `protobuf:"varint,4,opt,name=multi" json:"multi,omitempty"`
	Platetype  []string  `protobuf:"bytes,5,rep,name=platetype" json:"platetype,omitempty"`
	What       []string  `protobuf:"bytes,6,rep,name=what" json:"what,omitempty"`
	Llf        []bool    `protobuf:"varint,7,rep,packed,name=llf" json:"llf,omitempty"`
}

func (m *AspirateRequest) Reset()                    { *m = AspirateRequest{} }
func (m *AspirateRequest) String() string            { return proto.CompactTextString(m) }
func (*AspirateRequest) ProtoMessage()               {}
func (*AspirateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AspirateRequest) GetVolume() []float64 {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *AspirateRequest) GetOverstroke() []bool {
	if m != nil {
		return m.Overstroke
	}
	return nil
}

func (m *AspirateRequest) GetHead() int32 {
	if m != nil {
		return m.Head
	}
	return 0
}

func (m *AspirateRequest) GetMulti() int32 {
	if m != nil {
		return m.Multi
	}
	return 0
}

func (m *AspirateRequest) GetPlatetype() []string {
	if m != nil {
		return m.Platetype
	}
	return nil
}

func (m *AspirateRequest) GetWhat() []string {
	if m != nil {
		return m.What
	}
	return nil
}

func (m *AspirateRequest) GetLlf() []bool {
	if m != nil {
		return m.Llf
	}
	return nil
}

type DispenseRequest struct {
	Volume    []float64 `protobuf:"fixed64,1,rep,packed,name=volume" json:"volume,omitempty"`
	Blowout   []bool    `protobuf:"varint,2,rep,packed,name=blowout" json:"blowout,omitempty"`
	Head      int32     `protobuf:"varint,3,opt,name=head" json:"head,omitempty"`
	Multi     int32     `protobuf:"varint,4,opt,name=multi" json:"multi,omitempty"`
	Platetype []string  `protobuf:"bytes,5,rep,name=platetype" json:"platetype,omitempty"`
	What      []string  `protobuf:"bytes,6,rep,name=what" json:"what,omitempty"`
	Llf       []bool    `protobuf:"varint,7,rep,packed,name=llf" json:"llf,omitempty"`
}

func (m *DispenseRequest) Reset()                    { *m = DispenseRequest{} }
func (m *DispenseRequest) String() string            { return proto.CompactTextString(m) }
func (*DispenseRequest) ProtoMessage()               {}
func (*DispenseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DispenseRequest) GetVolume() []float64 {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *DispenseRequest) GetBlowout() []bool {
	if m != nil {
		return m.Blowout
	}
	return nil
}

func (m *DispenseRequest) GetHead() int32 {
	if m != nil {
		return m.Head
	}
	return 0
}

func (m *DispenseRequest) GetMulti() int32 {
	if m != nil {
		return m.Multi
	}
	return 0
}

func (m *DispenseRequest) GetPlatetype() []string {
	if m != nil {
		return m.Platetype
	}
	return nil
}

func (m *DispenseRequest) GetWhat() []string {
	if m != nil {
		return m.What
	}
	return nil
}

func (m *DispenseRequest) GetLlf() []bool {
	if m != nil {
		return m.Llf
	}
	return nil
}

type LoadTipsRequest struct {
	Channels  []int32  `protobuf:"varint,1,rep,packed,name=channels" json:"channels,omitempty"`
	Head      int32    `protobuf:"varint,2,opt,name=head" json:"head,omitempty"`
	Multi     int32    `protobuf:"varint,3,opt,name=multi" json:"multi,omitempty"`
	Platetype []string `protobuf:"bytes,4,rep,name=platetype" json:"platetype,omitempty"`
	Position  []string `protobuf:"bytes,5,rep,name=position" json:"position,omitempty"`
	Well      []string `protobuf:"bytes,6,rep,name=well" json:"well,omitempty"`
}

func (m *LoadTipsRequest) Reset()                    { *m = LoadTipsRequest{} }
func (m *LoadTipsRequest) String() string            { return proto.CompactTextString(m) }
func (*LoadTipsRequest) ProtoMessage()               {}
func (*LoadTipsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *LoadTipsRequest) GetChannels() []int32 {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *LoadTipsRequest) GetHead() int32 {
	if m != nil {
		return m.Head
	}
	return 0
}

func (m *LoadTipsRequest) GetMulti() int32 {
	if m != nil {
		return m.Multi
	}
	return 0
}

func (m *LoadTipsRequest) GetPlatetype() []string {
	if m != nil {
		return m.Platetype
	}
	return nil
}

func (m *LoadTipsRequest) GetPosition() []string {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *LoadTipsRequest) GetWell() []string {
	if m != nil {
		return m.Well
	}
	return nil
}

type MixRequest struct {
	Head      int32     `protobuf:"varint,1,opt,name=head" json:"head,omitempty"`
	Volume    []float64 `protobuf:"fixed64,2,rep,packed,name=volume" json:"volume,omitempty"`
	Platetype []string  `protobuf:"bytes,3,rep,name=platetype" json:"platetype,omitempty"`
	Cycles    []int32   `protobuf:"varint,4,rep,packed,name=cycles" json:"cycles,omitempty"`
	Multi     int32     `protobuf:"varint,5,opt,name=multi" json:"multi,omitempty"`
	What      []string  `protobuf:"bytes,6,rep,name=what" json:"what,omitempty"`
	Blowout   []bool    `protobuf:"varint,7,rep,packed,name=blowout" json:"blowout,omitempty"`
}

func (m *MixRequest) Reset()                    { *m = MixRequest{} }
func (m *MixRequest) String() string            { return proto.CompactTextString(m) }
func (*MixRequest) ProtoMessage()               {}
func (*MixRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *MixRequest) GetHead() int32 {
	if m != nil {
		return m.Head
	}
	return 0
}

func (m *MixRequest) GetVolume() []float64 {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *MixRequest) GetPlatetype() []string {
	if m != nil {
		return m.Platetype
	}
	return nil
}

func (m *MixRequest) GetCycles() []int32 {
	if m != nil {
		return m.Cycles
	}
	return nil
}

func (m *MixRequest) GetMulti() int32 {
	if m != nil {
		return m.Multi
	}
	return 0
}

func (m *MixRequest) GetWhat() []string {
	if m != nil {
		return m.What
	}
	return nil
}

func (m *MixRequest) GetBlowout() []bool {
	if m != nil {
		return m.Blowout
	}
	return nil
}

type MoveRequest struct {
	Deckposition []string  `protobuf:"bytes,1,rep,name=deckposition" json:"deckposition,omitempty"`
	Wellcoords   []string  `protobuf:"bytes,2,rep,name=wellcoords" json:"wellcoords,omitempty"`
	Reference    []int32   `protobuf:"varint,3,rep,packed,name=reference" json:"reference,omitempty"`
	OffsetX      []float64 `protobuf:"fixed64,4,rep,packed,name=offset_x,json=offsetX" json:"offset_x,omitempty"`
	OffsetY      []float64 `protobuf:"fixed64,5,rep,packed,name=offset_y,json=offsetY" json:"offset_y,omitempty"`
	OffsetZ      []float64 `protobuf:"fixed64,6,rep,packed,name=offset_z,json=offsetZ" json:"offset_z,omitempty"`
	PlateType    []string  `protobuf:"bytes,7,rep,name=plate_type,json=plateType" json:"plate_type,omitempty"`
	Head         int32     `protobuf:"varint,8,opt,name=head" json:"head,omitempty"`
}

func (m *MoveRequest) Reset()                    { *m = MoveRequest{} }
func (m *MoveRequest) String() string            { return proto.CompactTextString(m) }
func (*MoveRequest) ProtoMessage()               {}
func (*MoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *MoveRequest) GetDeckposition() []string {
	if m != nil {
		return m.Deckposition
	}
	return nil
}

func (m *MoveRequest) GetWellcoords() []string {
	if m != nil {
		return m.Wellcoords
	}
	return nil
}

func (m *MoveRequest) GetReference() []int32 {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (m *MoveRequest) GetOffsetX() []float64 {
	if m != nil {
		return m.OffsetX
	}
	return nil
}

func (m *MoveRequest) GetOffsetY() []float64 {
	if m != nil {
		return m.OffsetY
	}
	return nil
}

func (m *MoveRequest) GetOffsetZ() []float64 {
	if m != nil {
		return m.OffsetZ
	}
	return nil
}

func (m *MoveRequest) GetPlateType() []string {
	if m != nil {
		return m.PlateType
	}
	return nil
}

func (m *MoveRequest) GetHead() int32 {
	if m != nil {
		return m.Head
	}
	return 0
}

type ResetPistonsRequest struct {
	Head    int32 `protobuf:"varint,1,opt,name=head" json:"head,omitempty"`
	Channel int32 `protobuf:"varint,2,opt,name=channel" json:"channel,omitempty"`
}

func (m *ResetPistonsRequest) Reset()                    { *m = ResetPistonsRequest{} }
func (m *ResetPistonsRequest) String() string            { return proto.CompactTextString(m) }
func (*ResetPistonsRequest) ProtoMessage()               {}
func (*ResetPistonsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ResetPistonsRequest) GetHead() int32 {
	if m != nil {
		return m.Head
	}
	return 0
}

func (m *ResetPistonsRequest) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

type SetDriveSpeedRequest struct {
	Drive string  `protobuf:"bytes,1,opt,name=drive" json:"drive,omitempty"`
	Rate  float64 `protobuf:"fixed64,2,opt,name=rate" json:"rate,omitempty"`
}

func (m *SetDriveSpeedRequest) Reset()                    { *m = SetDriveSpeedRequest{} }
func (m *SetDriveSpeedRequest) String() string            { return proto.CompactTextString(m) }
func (*SetDriveSpeedRequest) ProtoMessage()               {}
func (*SetDriveSpeedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SetDriveSpeedRequest) GetDrive() string {
	if m != nil {
		return m.Drive
	}
	return ""
}

func (m *SetDriveSpeedRequest) GetRate() float64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

type SetPipetteSpeedRequest struct {
	Head    int32   `protobuf:"varint,1,opt,name=head" json:"head,omitempty"`
	Channel int32   `protobuf:"varint,2,opt,name=channel" json:"channel,omitempty"`
	Rate    float64 `protobuf:"fixed64,3,opt,name=rate" json:"rate,omitempty"`
}

func (m *SetPipetteSpeedRequest) Reset()                    { *m = SetPipetteSpeedRequest{} }
func (m *SetPipetteSpeedRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPipetteSpeedRequest) ProtoMessage()               {}
func (*SetPipetteSpeedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *SetPipetteSpeedRequest) GetHead() int32 {
	if m != nil {
		return m.Head
	}
	return 0
}

func (m *SetPipetteSpeedRequest) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *SetPipetteSpeedRequest) GetRate() float64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

type UnloadTipsRequest struct {
	Channels  []int32  `protobuf:"varint,1,rep,packed,name=channels" json:"channels,omitempty"`
	Head      int32    `protobuf:"varint,2,opt,name=head" json:"head,omitempty"`
	Multi     int32    `protobuf:"varint,3,opt,name=multi" json:"multi,omitempty"`
	Platetype []string `protobuf:"bytes,4,rep,name=platetype" json:"platetype,omitempty"`
	Position  []string `protobuf:"bytes,5,rep,name=position" json:"position,omitempty"`
	Well      []string `protobuf:"bytes,6,rep,name=well" json:"well,omitempty"`
}

func (m *UnloadTipsRequest) Reset()                    { *m = UnloadTipsRequest{} }
func (m *UnloadTipsRequest) String() string            { return proto.CompactTextString(m) }
func (*UnloadTipsRequest) ProtoMessage()               {}
func (*UnloadTipsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *UnloadTipsRequest) GetChannels() []int32 {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *UnloadTipsRequest) GetHead() int32 {
	if m != nil {
		return m.Head
	}
	return 0
}

func (m *UnloadTipsRequest) GetMulti() int32 {
	if m != nil {
		return m.Multi
	}
	return 0
}

func (m *UnloadTipsRequest) GetPlatetype() []string {
	if m != nil {
		return m.Platetype
	}
	return nil
}

func (m *UnloadTipsRequest) GetPosition() []string {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *UnloadTipsRequest) GetWell() []string {
	if m != nil {
		return m.Well
	}
	return nil
}

type UpdateMetaDataRequest struct {
	LHProperties_JSON string `protobuf:"bytes,1,opt,name=LH_properties_JSON,json=LHPropertiesJSON" json:"LH_properties_JSON,omitempty"`
}

func (m *UpdateMetaDataRequest) Reset()                    { *m = UpdateMetaDataRequest{} }
func (m *UpdateMetaDataRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateMetaDataRequest) ProtoMessage()               {}
func (*UpdateMetaDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *UpdateMetaDataRequest) GetLHProperties_JSON() string {
	if m != nil {
		return m.LHProperties_JSON
	}
	return ""
}

type WaitRequest struct {
	Time float64 `protobuf:"fixed64,1,opt,name=time" json:"time,omitempty"`
}

func (m *WaitRequest) Reset()                    { *m = WaitRequest{} }
func (m *WaitRequest) String() string            { return proto.CompactTextString(m) }
func (*WaitRequest) ProtoMessage()               {}
func (*WaitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *WaitRequest) GetTime() float64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type TransferRequest struct {
	What      []string  `protobuf:"bytes,1,rep,name=what" json:"what,omitempty"`
	Component []string  `protobuf:"bytes,7,rep,name=component" json:"component,omitempty"`
	Platefrom []string  `protobuf:"bytes,2,rep,name=platefrom" json:"platefrom,omitempty"`
	Wellfrom  []string  `protobuf:"bytes,3,rep,name=wellfrom" json:"wellfrom,omitempty"`
	Plateto   []string  `protobuf:"bytes,4,rep,name=plateto" json:"plateto,omitempty"`
	Wellto    []string  `protobuf:"bytes,5,rep,name=wellto" json:"wellto,omitempty"`
	Volume    []float64 `protobuf:"fixed64,6,rep,packed,name=volume" json:"volume,omitempty"`
}

func (m *TransferRequest) Reset()                    { *m = TransferRequest{} }
func (m *TransferRequest) String() string            { return proto.CompactTextString(m) }
func (*TransferRequest) ProtoMessage()               {}
func (*TransferRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *TransferRequest) GetWhat() []string {
	if m != nil {
		return m.What
	}
	return nil
}

func (m *TransferRequest) GetComponent() []string {
	if m != nil {
		return m.Component
	}
	return nil
}

func (m *TransferRequest) GetPlatefrom() []string {
	if m != nil {
		return m.Platefrom
	}
	return nil
}

func (m *TransferRequest) GetWellfrom() []string {
	if m != nil {
		return m.Wellfrom
	}
	return nil
}

func (m *TransferRequest) GetPlateto() []string {
	if m != nil {
		return m.Plateto
	}
	return nil
}

func (m *TransferRequest) GetWellto() []string {
	if m != nil {
		return m.Wellto
	}
	return nil
}

func (m *TransferRequest) GetVolume() []float64 {
	if m != nil {
		return m.Volume
	}
	return nil
}

type CommandReply struct {
	Errorcode int32  `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
	Msg       string `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
}

func (m *CommandReply) Reset()                    { *m = CommandReply{} }
func (m *CommandReply) String() string            { return proto.CompactTextString(m) }
func (*CommandReply) ProtoMessage()               {}
func (*CommandReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CommandReply) GetErrorcode() int32 {
	if m != nil {
		return m.Errorcode
	}
	return 0
}

func (m *CommandReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type GetCapabilitiesReply struct {
	LHProperties_JSON string        `protobuf:"bytes,1,opt,name=LH_properties_JSON,json=LHPropertiesJSON" json:"LH_properties_JSON,omitempty"`
	Status            *CommandReply `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *GetCapabilitiesReply) Reset()                    { *m = GetCapabilitiesReply{} }
func (m *GetCapabilitiesReply) String() string            { return proto.CompactTextString(m) }
func (*GetCapabilitiesReply) ProtoMessage()               {}
func (*GetCapabilitiesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GetCapabilitiesReply) GetLHProperties_JSON() string {
	if m != nil {
		return m.LHProperties_JSON
	}
	return ""
}

func (m *GetCapabilitiesReply) GetStatus() *CommandReply {
	if m != nil {
		return m.Status
	}
	return nil
}

type GetOutputFileReply struct {
	OutputFile []byte        `protobuf:"bytes,1,opt,name=output_file,json=outputFile,proto3" json:"output_file,omitempty"`
	Status     *CommandReply `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *GetOutputFileReply) Reset()                    { *m = GetOutputFileReply{} }
func (m *GetOutputFileReply) String() string            { return proto.CompactTextString(m) }
func (*GetOutputFileReply) ProtoMessage()               {}
func (*GetOutputFileReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GetOutputFileReply) GetOutputFile() []byte {
	if m != nil {
		return m.OutputFile
	}
	return nil
}

func (m *GetOutputFileReply) GetStatus() *CommandReply {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*AddPlateToRequest)(nil), "pb.AddPlateToRequest")
	proto.RegisterType((*FinalizeRequest)(nil), "pb.FinalizeRequest")
	proto.RegisterType((*GetCapabilitiesRequest)(nil), "pb.GetCapabilitiesRequest")
	proto.RegisterType((*GetOutputFileRequest)(nil), "pb.GetOutputFileRequest")
	proto.RegisterType((*InitializeRequest)(nil), "pb.InitializeRequest")
	proto.RegisterType((*MessageRequest)(nil), "pb.MessageRequest")
	proto.RegisterType((*RemoveAllPlatesRequest)(nil), "pb.RemoveAllPlatesRequest")
	proto.RegisterType((*RemovePlateAtRequest)(nil), "pb.RemovePlateAtRequest")
	proto.RegisterType((*AspirateRequest)(nil), "pb.AspirateRequest")
	proto.RegisterType((*DispenseRequest)(nil), "pb.DispenseRequest")
	proto.RegisterType((*LoadTipsRequest)(nil), "pb.LoadTipsRequest")
	proto.RegisterType((*MixRequest)(nil), "pb.MixRequest")
	proto.RegisterType((*MoveRequest)(nil), "pb.MoveRequest")
	proto.RegisterType((*ResetPistonsRequest)(nil), "pb.ResetPistonsRequest")
	proto.RegisterType((*SetDriveSpeedRequest)(nil), "pb.SetDriveSpeedRequest")
	proto.RegisterType((*SetPipetteSpeedRequest)(nil), "pb.SetPipetteSpeedRequest")
	proto.RegisterType((*UnloadTipsRequest)(nil), "pb.UnloadTipsRequest")
	proto.RegisterType((*UpdateMetaDataRequest)(nil), "pb.UpdateMetaDataRequest")
	proto.RegisterType((*WaitRequest)(nil), "pb.WaitRequest")
	proto.RegisterType((*TransferRequest)(nil), "pb.TransferRequest")
	proto.RegisterType((*CommandReply)(nil), "pb.CommandReply")
	proto.RegisterType((*GetCapabilitiesReply)(nil), "pb.GetCapabilitiesReply")
	proto.RegisterType((*GetOutputFileReply)(nil), "pb.GetOutputFileReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LowLevelLiquidhandlingDriver service

type LowLevelLiquidhandlingDriverClient interface {
	AddPlateTo(ctx context.Context, in *AddPlateToRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Finalize(ctx context.Context, in *FinalizeRequest, opts ...grpc.CallOption) (*CommandReply, error)
	GetCapabilities(ctx context.Context, in *GetCapabilitiesRequest, opts ...grpc.CallOption) (*GetCapabilitiesReply, error)
	GetOutputFile(ctx context.Context, in *GetOutputFileRequest, opts ...grpc.CallOption) (*GetOutputFileReply, error)
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Message(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*CommandReply, error)
	RemoveAllPlates(ctx context.Context, in *RemoveAllPlatesRequest, opts ...grpc.CallOption) (*CommandReply, error)
	RemovePlateAt(ctx context.Context, in *RemovePlateAtRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Aspirate(ctx context.Context, in *AspirateRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Dispense(ctx context.Context, in *DispenseRequest, opts ...grpc.CallOption) (*CommandReply, error)
	LoadTips(ctx context.Context, in *LoadTipsRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Mix(ctx context.Context, in *MixRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*CommandReply, error)
	ResetPistons(ctx context.Context, in *ResetPistonsRequest, opts ...grpc.CallOption) (*CommandReply, error)
	SetDriveSpeed(ctx context.Context, in *SetDriveSpeedRequest, opts ...grpc.CallOption) (*CommandReply, error)
	SetPipetteSpeed(ctx context.Context, in *SetPipetteSpeedRequest, opts ...grpc.CallOption) (*CommandReply, error)
	UnloadTips(ctx context.Context, in *UnloadTipsRequest, opts ...grpc.CallOption) (*CommandReply, error)
	UpdateMetaData(ctx context.Context, in *UpdateMetaDataRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Wait(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (*CommandReply, error)
}

type lowLevelLiquidhandlingDriverClient struct {
	cc *grpc.ClientConn
}

func NewLowLevelLiquidhandlingDriverClient(cc *grpc.ClientConn) LowLevelLiquidhandlingDriverClient {
	return &lowLevelLiquidhandlingDriverClient{cc}
}

func (c *lowLevelLiquidhandlingDriverClient) AddPlateTo(ctx context.Context, in *AddPlateToRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/AddPlateTo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) Finalize(ctx context.Context, in *FinalizeRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/Finalize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) GetCapabilities(ctx context.Context, in *GetCapabilitiesRequest, opts ...grpc.CallOption) (*GetCapabilitiesReply, error) {
	out := new(GetCapabilitiesReply)
	err := grpc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/GetCapabilities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) GetOutputFile(ctx context.Context, in *GetOutputFileRequest, opts ...grpc.CallOption) (*GetOutputFileReply, error) {
	out := new(GetOutputFileReply)
	err := grpc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/GetOutputFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/Initialize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) Message(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/Message", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) RemoveAllPlates(ctx context.Context, in *RemoveAllPlatesRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/RemoveAllPlates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) RemovePlateAt(ctx context.Context, in *RemovePlateAtRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/RemovePlateAt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) Aspirate(ctx context.Context, in *AspirateRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/Aspirate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) Dispense(ctx context.Context, in *DispenseRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/Dispense", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) LoadTips(ctx context.Context, in *LoadTipsRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/LoadTips", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) Mix(ctx context.Context, in *MixRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/Mix", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/Move", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) ResetPistons(ctx context.Context, in *ResetPistonsRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/ResetPistons", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) SetDriveSpeed(ctx context.Context, in *SetDriveSpeedRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/SetDriveSpeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) SetPipetteSpeed(ctx context.Context, in *SetPipetteSpeedRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/SetPipetteSpeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) UnloadTips(ctx context.Context, in *UnloadTipsRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/UnloadTips", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) UpdateMetaData(ctx context.Context, in *UpdateMetaDataRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/UpdateMetaData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) Wait(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/Wait", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LowLevelLiquidhandlingDriver service

type LowLevelLiquidhandlingDriverServer interface {
	AddPlateTo(context.Context, *AddPlateToRequest) (*CommandReply, error)
	Finalize(context.Context, *FinalizeRequest) (*CommandReply, error)
	GetCapabilities(context.Context, *GetCapabilitiesRequest) (*GetCapabilitiesReply, error)
	GetOutputFile(context.Context, *GetOutputFileRequest) (*GetOutputFileReply, error)
	Initialize(context.Context, *InitializeRequest) (*CommandReply, error)
	Message(context.Context, *MessageRequest) (*CommandReply, error)
	RemoveAllPlates(context.Context, *RemoveAllPlatesRequest) (*CommandReply, error)
	RemovePlateAt(context.Context, *RemovePlateAtRequest) (*CommandReply, error)
	Aspirate(context.Context, *AspirateRequest) (*CommandReply, error)
	Dispense(context.Context, *DispenseRequest) (*CommandReply, error)
	LoadTips(context.Context, *LoadTipsRequest) (*CommandReply, error)
	Mix(context.Context, *MixRequest) (*CommandReply, error)
	Move(context.Context, *MoveRequest) (*CommandReply, error)
	ResetPistons(context.Context, *ResetPistonsRequest) (*CommandReply, error)
	SetDriveSpeed(context.Context, *SetDriveSpeedRequest) (*CommandReply, error)
	SetPipetteSpeed(context.Context, *SetPipetteSpeedRequest) (*CommandReply, error)
	UnloadTips(context.Context, *UnloadTipsRequest) (*CommandReply, error)
	UpdateMetaData(context.Context, *UpdateMetaDataRequest) (*CommandReply, error)
	Wait(context.Context, *WaitRequest) (*CommandReply, error)
}

func RegisterLowLevelLiquidhandlingDriverServer(s *grpc.Server, srv LowLevelLiquidhandlingDriverServer) {
	s.RegisterService(&_LowLevelLiquidhandlingDriver_serviceDesc, srv)
}

func _LowLevelLiquidhandlingDriver_AddPlateTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlateToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).AddPlateTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/AddPlateTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).AddPlateTo(ctx, req.(*AddPlateToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_Finalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).Finalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/Finalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).Finalize(ctx, req.(*FinalizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_GetCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).GetCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/GetCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).GetCapabilities(ctx, req.(*GetCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_GetOutputFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutputFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).GetOutputFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/GetOutputFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).GetOutputFile(ctx, req.(*GetOutputFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_Message_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).Message(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/Message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).Message(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_RemoveAllPlates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAllPlatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).RemoveAllPlates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/RemoveAllPlates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).RemoveAllPlates(ctx, req.(*RemoveAllPlatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_RemovePlateAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePlateAtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).RemovePlateAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/RemovePlateAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).RemovePlateAt(ctx, req.(*RemovePlateAtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_Aspirate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AspirateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).Aspirate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/Aspirate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).Aspirate(ctx, req.(*AspirateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_Dispense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).Dispense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/Dispense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).Dispense(ctx, req.(*DispenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_LoadTips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadTipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).LoadTips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/LoadTips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).LoadTips(ctx, req.(*LoadTipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_Mix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).Mix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/Mix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).Mix(ctx, req.(*MixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_ResetPistons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPistonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).ResetPistons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/ResetPistons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).ResetPistons(ctx, req.(*ResetPistonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_SetDriveSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDriveSpeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).SetDriveSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/SetDriveSpeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).SetDriveSpeed(ctx, req.(*SetDriveSpeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_SetPipetteSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPipetteSpeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).SetPipetteSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/SetPipetteSpeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).SetPipetteSpeed(ctx, req.(*SetPipetteSpeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_UnloadTips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnloadTipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).UnloadTips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/UnloadTips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).UnloadTips(ctx, req.(*UnloadTipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_UpdateMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetaDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).UpdateMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/UpdateMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).UpdateMetaData(ctx, req.(*UpdateMetaDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_Wait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).Wait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/Wait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).Wait(ctx, req.(*WaitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LowLevelLiquidhandlingDriver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.LowLevelLiquidhandlingDriver",
	HandlerType: (*LowLevelLiquidhandlingDriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPlateTo",
			Handler:    _LowLevelLiquidhandlingDriver_AddPlateTo_Handler,
		},
		{
			MethodName: "Finalize",
			Handler:    _LowLevelLiquidhandlingDriver_Finalize_Handler,
		},
		{
			MethodName: "GetCapabilities",
			Handler:    _LowLevelLiquidhandlingDriver_GetCapabilities_Handler,
		},
		{
			MethodName: "GetOutputFile",
			Handler:    _LowLevelLiquidhandlingDriver_GetOutputFile_Handler,
		},
		{
			MethodName: "Initialize",
			Handler:    _LowLevelLiquidhandlingDriver_Initialize_Handler,
		},
		{
			MethodName: "Message",
			Handler:    _LowLevelLiquidhandlingDriver_Message_Handler,
		},
		{
			MethodName: "RemoveAllPlates",
			Handler:    _LowLevelLiquidhandlingDriver_RemoveAllPlates_Handler,
		},
		{
			MethodName: "RemovePlateAt",
			Handler:    _LowLevelLiquidhandlingDriver_RemovePlateAt_Handler,
		},
		{
			MethodName: "Aspirate",
			Handler:    _LowLevelLiquidhandlingDriver_Aspirate_Handler,
		},
		{
			MethodName: "Dispense",
			Handler:    _LowLevelLiquidhandlingDriver_Dispense_Handler,
		},
		{
			MethodName: "LoadTips",
			Handler:    _LowLevelLiquidhandlingDriver_LoadTips_Handler,
		},
		{
			MethodName: "Mix",
			Handler:    _LowLevelLiquidhandlingDriver_Mix_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _LowLevelLiquidhandlingDriver_Move_Handler,
		},
		{
			MethodName: "ResetPistons",
			Handler:    _LowLevelLiquidhandlingDriver_ResetPistons_Handler,
		},
		{
			MethodName: "SetDriveSpeed",
			Handler:    _LowLevelLiquidhandlingDriver_SetDriveSpeed_Handler,
		},
		{
			MethodName: "SetPipetteSpeed",
			Handler:    _LowLevelLiquidhandlingDriver_SetPipetteSpeed_Handler,
		},
		{
			MethodName: "UnloadTips",
			Handler:    _LowLevelLiquidhandlingDriver_UnloadTips_Handler,
		},
		{
			MethodName: "UpdateMetaData",
			Handler:    _LowLevelLiquidhandlingDriver_UpdateMetaData_Handler,
		},
		{
			MethodName: "Wait",
			Handler:    _LowLevelLiquidhandlingDriver_Wait_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lh.proto",
}

// Client API for HighLevelLiquidhandlingDriver service

type HighLevelLiquidhandlingDriverClient interface {
	AddPlateTo(ctx context.Context, in *AddPlateToRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Finalize(ctx context.Context, in *FinalizeRequest, opts ...grpc.CallOption) (*CommandReply, error)
	GetCapabilities(ctx context.Context, in *GetCapabilitiesRequest, opts ...grpc.CallOption) (*GetCapabilitiesReply, error)
	GetOutputFile(ctx context.Context, in *GetOutputFileRequest, opts ...grpc.CallOption) (*GetOutputFileReply, error)
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Message(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*CommandReply, error)
	RemoveAllPlates(ctx context.Context, in *RemoveAllPlatesRequest, opts ...grpc.CallOption) (*CommandReply, error)
	RemovePlateAt(ctx context.Context, in *RemovePlateAtRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*CommandReply, error)
}

type highLevelLiquidhandlingDriverClient struct {
	cc *grpc.ClientConn
}

func NewHighLevelLiquidhandlingDriverClient(cc *grpc.ClientConn) HighLevelLiquidhandlingDriverClient {
	return &highLevelLiquidhandlingDriverClient{cc}
}

func (c *highLevelLiquidhandlingDriverClient) AddPlateTo(ctx context.Context, in *AddPlateToRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.HighLevelLiquidhandlingDriver/AddPlateTo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highLevelLiquidhandlingDriverClient) Finalize(ctx context.Context, in *FinalizeRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.HighLevelLiquidhandlingDriver/Finalize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highLevelLiquidhandlingDriverClient) GetCapabilities(ctx context.Context, in *GetCapabilitiesRequest, opts ...grpc.CallOption) (*GetCapabilitiesReply, error) {
	out := new(GetCapabilitiesReply)
	err := grpc.Invoke(ctx, "/pb.HighLevelLiquidhandlingDriver/GetCapabilities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highLevelLiquidhandlingDriverClient) GetOutputFile(ctx context.Context, in *GetOutputFileRequest, opts ...grpc.CallOption) (*GetOutputFileReply, error) {
	out := new(GetOutputFileReply)
	err := grpc.Invoke(ctx, "/pb.HighLevelLiquidhandlingDriver/GetOutputFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highLevelLiquidhandlingDriverClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.HighLevelLiquidhandlingDriver/Initialize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highLevelLiquidhandlingDriverClient) Message(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.HighLevelLiquidhandlingDriver/Message", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highLevelLiquidhandlingDriverClient) RemoveAllPlates(ctx context.Context, in *RemoveAllPlatesRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.HighLevelLiquidhandlingDriver/RemoveAllPlates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highLevelLiquidhandlingDriverClient) RemovePlateAt(ctx context.Context, in *RemovePlateAtRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.HighLevelLiquidhandlingDriver/RemovePlateAt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highLevelLiquidhandlingDriverClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/pb.HighLevelLiquidhandlingDriver/Transfer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HighLevelLiquidhandlingDriver service

type HighLevelLiquidhandlingDriverServer interface {
	AddPlateTo(context.Context, *AddPlateToRequest) (*CommandReply, error)
	Finalize(context.Context, *FinalizeRequest) (*CommandReply, error)
	GetCapabilities(context.Context, *GetCapabilitiesRequest) (*GetCapabilitiesReply, error)
	GetOutputFile(context.Context, *GetOutputFileRequest) (*GetOutputFileReply, error)
	Initialize(context.Context, *InitializeRequest) (*CommandReply, error)
	Message(context.Context, *MessageRequest) (*CommandReply, error)
	RemoveAllPlates(context.Context, *RemoveAllPlatesRequest) (*CommandReply, error)
	RemovePlateAt(context.Context, *RemovePlateAtRequest) (*CommandReply, error)
	Transfer(context.Context, *TransferRequest) (*CommandReply, error)
}

func RegisterHighLevelLiquidhandlingDriverServer(s *grpc.Server, srv HighLevelLiquidhandlingDriverServer) {
	s.RegisterService(&_HighLevelLiquidhandlingDriver_serviceDesc, srv)
}

func _HighLevelLiquidhandlingDriver_AddPlateTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlateToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighLevelLiquidhandlingDriverServer).AddPlateTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HighLevelLiquidhandlingDriver/AddPlateTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighLevelLiquidhandlingDriverServer).AddPlateTo(ctx, req.(*AddPlateToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighLevelLiquidhandlingDriver_Finalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighLevelLiquidhandlingDriverServer).Finalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HighLevelLiquidhandlingDriver/Finalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighLevelLiquidhandlingDriverServer).Finalize(ctx, req.(*FinalizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighLevelLiquidhandlingDriver_GetCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighLevelLiquidhandlingDriverServer).GetCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HighLevelLiquidhandlingDriver/GetCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighLevelLiquidhandlingDriverServer).GetCapabilities(ctx, req.(*GetCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighLevelLiquidhandlingDriver_GetOutputFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutputFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighLevelLiquidhandlingDriverServer).GetOutputFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HighLevelLiquidhandlingDriver/GetOutputFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighLevelLiquidhandlingDriverServer).GetOutputFile(ctx, req.(*GetOutputFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighLevelLiquidhandlingDriver_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighLevelLiquidhandlingDriverServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HighLevelLiquidhandlingDriver/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighLevelLiquidhandlingDriverServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighLevelLiquidhandlingDriver_Message_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighLevelLiquidhandlingDriverServer).Message(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HighLevelLiquidhandlingDriver/Message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighLevelLiquidhandlingDriverServer).Message(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighLevelLiquidhandlingDriver_RemoveAllPlates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAllPlatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighLevelLiquidhandlingDriverServer).RemoveAllPlates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HighLevelLiquidhandlingDriver/RemoveAllPlates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighLevelLiquidhandlingDriverServer).RemoveAllPlates(ctx, req.(*RemoveAllPlatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighLevelLiquidhandlingDriver_RemovePlateAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePlateAtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighLevelLiquidhandlingDriverServer).RemovePlateAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HighLevelLiquidhandlingDriver/RemovePlateAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighLevelLiquidhandlingDriverServer).RemovePlateAt(ctx, req.(*RemovePlateAtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighLevelLiquidhandlingDriver_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighLevelLiquidhandlingDriverServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HighLevelLiquidhandlingDriver/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighLevelLiquidhandlingDriverServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HighLevelLiquidhandlingDriver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.HighLevelLiquidhandlingDriver",
	HandlerType: (*HighLevelLiquidhandlingDriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPlateTo",
			Handler:    _HighLevelLiquidhandlingDriver_AddPlateTo_Handler,
		},
		{
			MethodName: "Finalize",
			Handler:    _HighLevelLiquidhandlingDriver_Finalize_Handler,
		},
		{
			MethodName: "GetCapabilities",
			Handler:    _HighLevelLiquidhandlingDriver_GetCapabilities_Handler,
		},
		{
			MethodName: "GetOutputFile",
			Handler:    _HighLevelLiquidhandlingDriver_GetOutputFile_Handler,
		},
		{
			MethodName: "Initialize",
			Handler:    _HighLevelLiquidhandlingDriver_Initialize_Handler,
		},
		{
			MethodName: "Message",
			Handler:    _HighLevelLiquidhandlingDriver_Message_Handler,
		},
		{
			MethodName: "RemoveAllPlates",
			Handler:    _HighLevelLiquidhandlingDriver_RemoveAllPlates_Handler,
		},
		{
			MethodName: "RemovePlateAt",
			Handler:    _HighLevelLiquidhandlingDriver_RemovePlateAt_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _HighLevelLiquidhandlingDriver_Transfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lh.proto",
}

func init() { proto.RegisterFile("lh.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xcd, 0x6e, 0x1c, 0x45,
	0x10, 0x66, 0xbc, 0xbf, 0x2e, 0x3b, 0x5e, 0xbb, 0xed, 0x2c, 0x13, 0xcb, 0x21, 0x66, 0x4e, 0x46,
	0x20, 0x4b, 0x38, 0x07, 0x1f, 0x10, 0x02, 0xcb, 0x26, 0x71, 0xa2, 0x35, 0xb1, 0xc6, 0x8e, 0x80,
	0x5c, 0x56, 0xb3, 0x3b, 0xb5, 0xde, 0x56, 0x7a, 0xa7, 0xc7, 0xd3, 0xbd, 0x6b, 0x3b, 0xef, 0x83,
	0x38, 0xc3, 0x85, 0x2b, 0x37, 0x1e, 0x85, 0x07, 0xe0, 0x05, 0x50, 0x77, 0xcf, 0xff, 0xce, 0x42,
	0x72, 0x41, 0x8a, 0x94, 0x5b, 0x57, 0x55, 0x57, 0xcd, 0x57, 0x55, 0xdd, 0x5d, 0xdf, 0x40, 0x9b,
	0x8d, 0xf7, 0xc3, 0x88, 0x4b, 0x4e, 0x96, 0xc2, 0x81, 0x33, 0x80, 0x8d, 0x23, 0xdf, 0x3f, 0x67,
	0x9e, 0xc4, 0x4b, 0xee, 0xe2, 0xf5, 0x14, 0x85, 0x24, 0xdb, 0xd0, 0x0e, 0xb9, 0xa0, 0x92, 0xf2,
	0xc0, 0xb6, 0x76, 0xad, 0xbd, 0x65, 0x37, 0x95, 0xc9, 0x43, 0x80, 0x50, 0xed, 0xee, 0x3f, 0xbf,
	0x78, 0xf1, 0xbd, 0xbd, 0xa4, 0xad, 0xcb, 0x5a, 0xa3, 0x14, 0x84, 0x40, 0x3d, 0xf0, 0x26, 0x68,
	0xd7, 0xb4, 0x41, 0xaf, 0x9d, 0x0d, 0xe8, 0x3c, 0xa1, 0x81, 0xc7, 0xe8, 0x1b, 0x8c, 0xbf, 0xe0,
	0xd8, 0xd0, 0x7d, 0x8a, 0xf2, 0xd8, 0x0b, 0xbd, 0x01, 0x65, 0x54, 0x52, 0x14, 0x89, 0xa5, 0x0b,
	0x5b, 0x4f, 0x51, 0xbe, 0x98, 0xca, 0x70, 0x2a, 0x9f, 0x50, 0x96, 0x7a, 0x6c, 0xc2, 0xc6, 0xb3,
	0x80, 0x4a, 0x5a, 0x08, 0x73, 0x0d, 0x6b, 0x67, 0x28, 0x84, 0x77, 0x95, 0x68, 0xc8, 0x16, 0x34,
	0x18, 0xce, 0x90, 0x69, 0xdc, 0x0d, 0xd7, 0x08, 0x4a, 0x2b, 0xa9, 0x64, 0x18, 0xe3, 0x35, 0x82,
	0xc2, 0x2a, 0xf1, 0x56, 0x26, 0x58, 0xd5, 0x9a, 0x3c, 0x82, 0x15, 0x31, 0xe6, 0x37, 0xfd, 0xa1,
	0x17, 0x0c, 0x91, 0xd9, 0xf5, 0x5d, 0x6b, 0xaf, 0xed, 0x82, 0x52, 0x1d, 0x6b, 0x8d, 0x42, 0xee,
	0xe2, 0x84, 0xcf, 0xf0, 0x88, 0x31, 0x5d, 0xb6, 0x14, 0xf9, 0x01, 0x6c, 0x19, 0x8b, 0x56, 0x1f,
	0xc9, 0xb7, 0xa8, 0xa6, 0xf3, 0xbb, 0x05, 0x9d, 0x23, 0x11, 0xd2, 0xc8, 0x93, 0x69, 0x0a, 0x5d,
	0x68, 0xce, 0x38, 0x9b, 0x4e, 0xd0, 0xb6, 0x76, 0x6b, 0x7b, 0x96, 0x1b, 0x4b, 0xe4, 0x13, 0x00,
	0x3e, 0xc3, 0x48, 0xc8, 0x88, 0xbf, 0x56, 0x99, 0xd4, 0x14, 0xb2, 0x4c, 0xa3, 0xd2, 0x19, 0xa3,
	0xe7, 0xeb, 0x74, 0x1a, 0xae, 0x5e, 0xab, 0xc4, 0x27, 0x53, 0x26, 0xa9, 0x4e, 0xa4, 0xe1, 0x1a,
	0x81, 0xec, 0x80, 0xe9, 0x98, 0xbc, 0x0b, 0xd1, 0x6e, 0xec, 0xd6, 0xd2, 0x16, 0x2a, 0x85, 0x8a,
	0x73, 0x33, 0xf6, 0xa4, 0xdd, 0xd4, 0x06, 0xbd, 0x26, 0xeb, 0x50, 0x63, 0x6c, 0x64, 0xb7, 0xf4,
	0x47, 0xd5, 0xd2, 0xf9, 0xd5, 0x82, 0xce, 0x09, 0x15, 0x21, 0x06, 0xe2, 0x3f, 0x91, 0xdb, 0xd0,
	0x1a, 0x30, 0x7e, 0xc3, 0xa7, 0x32, 0x86, 0x9d, 0x88, 0xff, 0x33, 0xe6, 0x9f, 0x2d, 0xe8, 0xf4,
	0xb8, 0xe7, 0x5f, 0xd2, 0x50, 0xe4, 0xba, 0x33, 0x1c, 0x7b, 0x41, 0x80, 0x4c, 0x68, 0xd4, 0x0d,
	0x37, 0x95, 0x53, 0x74, 0x4b, 0x55, 0xe8, 0x6a, 0x0b, 0xd1, 0xd5, 0xcb, 0xe8, 0xf2, 0x27, 0xc0,
	0x40, 0xcf, 0xee, 0x93, 0x42, 0x8e, 0x8c, 0xa5, 0xc8, 0x91, 0x31, 0xe7, 0x37, 0x0b, 0xe0, 0x8c,
	0xde, 0x26, 0x10, 0x13, 0x18, 0x56, 0x0e, 0x46, 0x56, 0xea, 0xa5, 0x42, 0xa9, 0x0b, 0x40, 0x6a,
	0x65, 0x20, 0x5d, 0x68, 0x0e, 0xef, 0x86, 0x0c, 0x85, 0xc6, 0xd8, 0x70, 0x63, 0x29, 0x4b, 0xaa,
	0x91, 0x4f, 0xaa, 0xaa, 0xa8, 0xb9, 0x56, 0xb6, 0x0a, 0xad, 0x74, 0xfe, 0xb6, 0x60, 0xe5, 0x8c,
	0xcf, 0xd2, 0xc3, 0xe0, 0xc0, 0xaa, 0x8f, 0xc3, 0xd7, 0xb9, 0xa3, 0xaf, 0xa2, 0x14, 0x74, 0xea,
	0x48, 0xab, 0x84, 0x87, 0x9c, 0x47, 0xbe, 0xd0, 0x99, 0x2c, 0xbb, 0x39, 0x8d, 0xca, 0x26, 0xc2,
	0x11, 0x46, 0x18, 0x0c, 0x4d, 0x36, 0x0d, 0x37, 0x53, 0x90, 0x07, 0xd0, 0xe6, 0xa3, 0x91, 0x40,
	0xd9, 0xbf, 0xd5, 0xf9, 0x58, 0x6e, 0xcb, 0xc8, 0x3f, 0xe6, 0x4c, 0x77, 0xba, 0xe2, 0xa9, 0xe9,
	0xa7, 0x9c, 0xe9, 0x8d, 0xce, 0x2c, 0x35, 0xbd, 0xca, 0xde, 0x36, 0x5d, 0xbd, 0x56, 0xae, 0x7a,
	0x97, 0xf1, 0x21, 0xd3, 0x7d, 0x68, 0x67, 0x7d, 0x70, 0x8e, 0x61, 0xd3, 0x45, 0x81, 0xf2, 0x9c,
	0x0a, 0xc9, 0x03, 0xf1, 0x6f, 0x2d, 0xb3, 0xa1, 0x15, 0x9f, 0xac, 0xf8, 0x40, 0x25, 0xa2, 0xf3,
	0x2d, 0x6c, 0x5d, 0xa0, 0x3c, 0x89, 0xe8, 0x0c, 0x2f, 0x42, 0x44, 0x3f, 0xf7, 0x98, 0xf9, 0x4a,
	0x19, 0x3f, 0x1b, 0x46, 0x50, 0xb1, 0xd5, 0x73, 0xa1, 0x83, 0x58, 0xae, 0x5e, 0x3b, 0xaf, 0xa0,
	0x7b, 0xa1, 0x40, 0x84, 0x28, 0x65, 0x31, 0xc6, 0x3b, 0x21, 0x49, 0x63, 0xd7, 0x72, 0xb1, 0x7f,
	0xb1, 0x60, 0xe3, 0x65, 0xc0, 0xde, 0x83, 0x7b, 0xf3, 0x1d, 0xdc, 0x7f, 0x19, 0xfa, 0x9e, 0xc4,
	0x33, 0x94, 0xde, 0x89, 0x27, 0xbd, 0x04, 0xec, 0x17, 0x40, 0x7a, 0xa7, 0xfd, 0x30, 0xe2, 0x21,
	0x46, 0x6a, 0xd8, 0x98, 0xe1, 0x65, 0xaa, 0xba, 0xde, 0x3b, 0x3d, 0x4f, 0x0d, 0x4a, 0xef, 0x7c,
	0x0a, 0x2b, 0x3f, 0x78, 0x54, 0xe6, 0x2a, 0x28, 0xe9, 0xc4, 0x34, 0xc1, 0x72, 0xf5, 0xda, 0xf9,
	0xd3, 0x82, 0xce, 0x65, 0xe4, 0x05, 0x62, 0x84, 0x51, 0x6e, 0x9f, 0xbe, 0x2e, 0x56, 0xee, 0xba,
	0xec, 0xc0, 0xf2, 0x90, 0x4f, 0x42, 0x1e, 0x60, 0x20, 0x93, 0x03, 0x95, 0x2a, 0xd2, 0xec, 0x47,
	0x11, 0x9f, 0xc4, 0xa7, 0x3f, 0x53, 0xa8, 0xec, 0x55, 0x56, 0xda, 0x68, 0x6e, 0x72, 0x2a, 0xab,
	0x0e, 0x9a, 0x32, 0xf1, 0xb8, 0x6a, 0x89, 0xa8, 0xae, 0xb8, 0xda, 0x25, 0x79, 0x5c, 0xb1, 0x58,
	0xca, 0x3d, 0x18, 0xcd, 0xfc, 0x83, 0xe1, 0x9c, 0xc0, 0xea, 0x31, 0x9f, 0x4c, 0xbc, 0xc0, 0x77,
	0x31, 0x64, 0x77, 0x0a, 0x13, 0x46, 0x11, 0x8f, 0x86, 0xdc, 0xc7, 0xb8, 0x81, 0x99, 0x42, 0xbd,
	0xa9, 0x13, 0x71, 0x15, 0x4f, 0x4c, 0xb5, 0x7c, 0x5e, 0x6f, 0x5b, 0xeb, 0x4b, 0x4e, 0xa0, 0xa7,
	0x76, 0x71, 0x9e, 0xab, 0x68, 0xef, 0x54, 0x78, 0xb2, 0x07, 0x4d, 0x21, 0x3d, 0x39, 0x15, 0xfa,
	0xc3, 0x2b, 0x07, 0xeb, 0xfb, 0xe1, 0x60, 0x3f, 0x8f, 0xce, 0x8d, 0xed, 0x4e, 0x1f, 0x48, 0x89,
	0x25, 0xa8, 0xaf, 0x3d, 0x82, 0x15, 0xae, 0x55, 0xfd, 0x11, 0x65, 0xa6, 0x61, 0xab, 0x2e, 0xf0,
	0x74, 0xd7, 0xdb, 0x7f, 0xe0, 0xe0, 0xaf, 0x36, 0xec, 0xf4, 0xf8, 0x4d, 0x4f, 0xd1, 0x87, 0x1e,
	0xbd, 0x9e, 0x52, 0x7f, 0xec, 0x05, 0x3e, 0xa3, 0xc1, 0x95, 0xbe, 0xa6, 0x11, 0x39, 0x04, 0xc8,
	0x88, 0x13, 0xb9, 0xaf, 0x02, 0xcd, 0x11, 0xa9, 0xed, 0xb9, 0xf8, 0xce, 0x47, 0xe4, 0x31, 0xb4,
	0x13, 0x36, 0x44, 0x36, 0x95, 0xbd, 0xc4, 0x8d, 0x2a, 0x9d, 0x9e, 0x41, 0xa7, 0x54, 0x5f, 0xb2,
	0xad, 0xb6, 0x55, 0x93, 0xa8, 0x6d, 0xbb, 0xd2, 0x66, 0x42, 0x1d, 0xc3, 0xbd, 0x42, 0xe9, 0x48,
	0xb2, 0x79, 0x8e, 0x73, 0x6d, 0x77, 0x2b, 0x2c, 0x26, 0xc8, 0x21, 0x40, 0xc6, 0xc6, 0x4c, 0xf6,
	0x73, 0xec, 0xac, 0x32, 0x91, 0x2f, 0xa1, 0x15, 0x33, 0x36, 0x42, 0x94, 0xb9, 0x48, 0xdf, 0x2a,
	0x5d, 0x8e, 0xa0, 0x53, 0x62, 0x5c, 0x26, 0xf7, 0x6a, 0x1a, 0x56, 0x19, 0xe2, 0x6b, 0xb8, 0x57,
	0xa0, 0x66, 0x26, 0xe7, 0x2a, 0xb6, 0xb6, 0xa8, 0x65, 0x09, 0x49, 0x33, 0x2d, 0x2b, 0x51, 0xb6,
	0x45, 0x4e, 0x09, 0x3f, 0x32, 0x4e, 0x25, 0xb6, 0xb4, 0xc8, 0x29, 0x21, 0x28, 0xc6, 0xa9, 0x44,
	0x57, 0x2a, 0x9d, 0x3e, 0x83, 0xda, 0x19, 0xbd, 0x25, 0x6b, 0xba, 0x9e, 0x29, 0x6d, 0xa8, 0xdc,
	0xfa, 0x39, 0xd4, 0xd5, 0x8c, 0x26, 0x1d, 0xbd, 0x37, 0x9b, 0xd6, 0x95, 0x9b, 0xbf, 0x82, 0xd5,
	0xfc, 0x6c, 0x23, 0x1f, 0x9b, 0xa2, 0xcd, 0x4d, 0xbb, 0x45, 0x25, 0x2f, 0xcc, 0x34, 0x53, 0xf2,
	0xaa, 0x31, 0xb7, 0xa8, 0xe9, 0xa5, 0x81, 0x66, 0x9a, 0x5e, 0x3d, 0xe5, 0x2a, 0x43, 0x1c, 0x02,
	0x64, 0x63, 0xcb, 0x9c, 0xd1, 0xb9, 0x31, 0x56, 0xe9, 0xf8, 0x0d, 0xac, 0x15, 0xc7, 0x08, 0x79,
	0xa0, 0x9d, 0xab, 0x46, 0xcb, 0xa2, 0x2a, 0xab, 0x01, 0x62, 0xaa, 0x9c, 0x1b, 0x25, 0x55, 0x9b,
	0x0f, 0xfe, 0xa8, 0xc3, 0xc3, 0x53, 0x7a, 0x35, 0xfe, 0xf0, 0xd4, 0x7c, 0x78, 0x6a, 0x74, 0xcb,
	0x12, 0x5e, 0x61, 0x5a, 0x56, 0x62, 0x19, 0x55, 0x4e, 0x83, 0xa6, 0xfe, 0x9f, 0x7f, 0xfc, 0x4f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x52, 0x46, 0x08, 0xad, 0xdb, 0x0f, 0x00, 0x00,
}
