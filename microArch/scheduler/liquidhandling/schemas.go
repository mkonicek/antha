// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/actions.schema.json (15.517kB)
// schemas/layout.schema.json (8.11kB)

package liquidhandling

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _actionsSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x4b\x6f\x1c\xb9\x11\x3e\x4b\xbf\xa2\xd0\xbb\x08\x6c\x64\xf4\xf0\x29\x88\x6e\x06\xf6\xb2\x41\x10\x1b\xd8\x4d\x2e\x86\x33\xe0\x74\xd7\xa8\xb9\x66\x93\xbd\x24\x5b\xe3\x89\xa1\xff\x1e\xf0\xd5\x4f\xf6\x4b\x33\x12\x6c\x40\x3a\xd8\x33\xcd\x62\xb1\x58\x8f\xaf\x8a\xc5\x9e\x6f\x97\x17\xc9\xcf\x34\x4b\xee\x20\xc9\xb5\x2e\xd5\xdd\xcd\x0d\xe1\x3a\x27\xd7\xa9\x28\x6e\x48\xaa\xa9\xe0\xea\x4a\xa5\x39\x16\x24\xd9\x18\x5a\xff\xd9\xd3\xdf\xdd\xdc\xfc\xa1\x04\xf7\x14\xd7\x42\xde\xdf\x64\x92\xec\xf5\xd5\xed\xdf\x6e\xdc\xb3\x9f\xec\xb4\x0c\x55\x2a\x69\x69\xd8\x99\xa9\xff\xf8\xed\xc3\xbf\xe0\x37\x3b\x0e\x7b\x21\xc1\x0d\xef\x28\xbf\x07\xbf\x26\xa4\x44\x4a\x8a\x19\x88\x4a\x43\x56\x49\x33\xc4\xe8\x9f\x15\xcd\x72\xc2\x33\x46\xf9\x7d\xb2\xb9\x04\x00\x48\xf4\xb1\x44\xc3\x53\xec\xfe\xc0\x54\x87\xa7\x12\xff\xac\xa8\x44\xb3\xb1\x4f\xc9\x03\x4a\x65\x56\xde\x40\xe2\xd9\x27\x9f\x3d\x5d\x29\x45\x89\x52\x53\x54\xc9\x1d\x7c\xb3\xcf\xec\xf3\x30\xa5\xfd\xd0\x0e\xf4\x76\xa2\x73\x04\x4f\x0b\x62\x0f\xe6\xab\xdb\xf7\xc6\x6e\xec\x81\x30\x9a\x11\x4b\xbc\xe9\xf2\x49\x05\x57\xda\x70\x78\x77\x7d\x9b\xd4\x43\x8f\x0d\x55\x2d\xea\x12\x11\x26\xb4\x66\x86\xbb\x9a\x03\xb3\xe5\xa8\x50\x41\x97\x44\x4a\x72\xec\x0f\x16\x94\xff\xaa\xb1\x30\x02\xbd\xeb\x0d\x51\xff\xbc\x2b\xa8\x1d\x12\x1c\x3f\xec\x8d\x15\x06\x43\xe6\xef\x1b\x24\x3f\x4b\x34\xe3\xc9\x4f\x37\x19\xee\x29\xa7\x76\x23\x37\x5a\x12\xae\xf6\x28\xdf\xdb\x8d\x25\x6d\xc5\x2c\x9a\x5f\x4a\x51\x94\xfa\xa9\xb3\x0f\x84\x36\x73\x07\x53\x3f\x77\x9e\x34\xe3\xee\xd3\xa3\xf3\xf7\x9a\x99\x55\xcb\xc5\x45\xe2\x6c\xe0\xbf\x0d\x22\xe2\x17\x17\x01\x08\xc4\x1b\x0b\x28\x07\x02\x25\x23\x1a\xe1\x80\x8c\x99\x30\xba\xb8\x18\x7a\xbb\x79\xd8\x71\x76\x4e\x0a\x34\x9e\xae\x85\x26\x6c\xfb\x20\x58\x55\xa0\x71\x77\x43\xd8\xf3\xf6\x0b\xf3\xcc\xd2\x87\x6f\x03\xb9\x7e\xcf\x11\x32\xaa\x4a\x46\x8e\x60\x28\x83\x93\xfb\xdd\x6c\xfc\xac\x20\x96\xd2\xc6\xe7\x12\xfb\xf4\xd1\x0d\x76\x05\x99\x5c\xc8\x52\x82\xa3\x84\x52\xa2\x42\xae\x47\x16\x8c\xdb\xad\x40\xa2\x2a\x89\x05\x72\xdd\x95\x21\x15\x45\x29\x38\x72\xad\xa6\x25\x50\xd5\xee\xaa\xa1\x85\x43\x4e\xd3\x1c\x0a\xf2\x05\xa1\x2a\x41\xe7\x54\x8d\x6d\x3c\x44\x8c\x7b\xda\xc4\xc3\x45\x74\xa9\xf7\x66\x21\xa8\x17\x0a\xf3\xe2\xe6\x1d\xb5\x70\x2a\x78\x8a\x5c\x87\x50\x86\xa4\xe2\x54\x7b\x53\x8f\x58\x7b\x68\xf0\x88\x74\x7a\xc4\xe6\x1d\xe5\xd4\xb2\x8d\x58\xbf\x51\xbe\xd3\x7f\x5b\xd4\xb9\xc5\x3b\xd4\x8b\x57\xe7\x55\xb1\x43\xd9\x1e\x29\x28\xa7\x45\x55\x24\x77\x70\x7b\x7d\x1b\x91\xca\xea\x6b\x4e\x18\x43\xa4\x4c\x34\x3a\x67\x18\xca\x47\x15\xe0\x57\xe3\xad\x0a\xb3\x25\x5a\xb9\xec\xc9\x91\x90\x2c\xb3\xfe\x4b\xd8\xc7\xb6\xc5\xf6\x84\x29\xbc\xec\xd0\xce\x93\x5a\xee\x8e\x7c\x8e\xd8\x52\x25\xed\x90\x19\xc1\xa6\xf7\xd0\x22\xda\x80\x3e\x96\x34\x25\x8c\x1d\x8d\x65\x08\xfc\xc7\x05\xf6\x52\x78\x7a\x20\xac\xc2\x9e\xb3\x46\x71\xc9\x11\x4e\x46\xab\x25\x09\xfe\xd1\xde\x48\x3f\x3a\xbd\x6b\x74\x20\xa1\x6b\xfc\x18\xfb\x88\xe5\x5b\x8b\x44\xed\x1e\x07\xc2\x4b\xff\x4f\x3b\xbb\x1b\x4c\xff\xa7\x48\x9b\x80\xe8\x64\xcd\x88\x1f\x32\x4f\xec\xb4\x6e\xa6\xc3\x81\xea\xdc\xa6\x89\x5e\x7e\x97\x62\x27\xf4\x58\x6e\xef\xd4\x49\xf5\x68\xdb\x46\x66\xf9\xf4\xcb\xd6\x80\xd8\xd6\x40\x1d\x24\x52\x1c\x1c\xe0\xb0\x04\x3e\xf7\x66\x8e\x54\x50\xad\xad\xb4\x78\xc5\x28\x3a\xd2\x79\xbd\xc5\xf3\x75\xcc\x48\xbf\xfe\x62\x15\xc2\xc1\x2c\x01\x6f\x4a\x49\x85\x04\x2d\x7a\x2a\x79\x9b\x0c\x18\x46\x6a\x02\xbb\xcf\x59\x11\x6b\x9c\x59\x22\xa2\xb1\x9c\x14\x87\x3a\x8b\x05\x8b\x8f\xcc\x2e\x2a\xa6\x69\xc9\x5c\xc9\xf4\xee\xfa\x76\x8c\xac\x03\x6c\x4b\x76\x66\x4c\x77\xfe\x9d\xa5\x26\xf6\xf9\xcb\x6e\xee\x72\x62\xab\xd3\x90\x17\x99\x64\x12\x93\x46\xae\xff\x5d\x66\x44\xe3\x6c\x1c\x56\x96\x4c\x85\x24\xa0\x6d\x91\x50\xc7\xe3\x29\x11\xc7\x44\x6a\x22\x8c\xe3\x61\xeb\x19\xaf\x8f\x34\xc3\xe3\x6e\xa2\xa8\x6d\x23\x4e\xd4\x49\xda\xab\x4f\x30\xf2\x25\xd0\xb9\x4d\x91\x23\xbd\xcf\xf5\xac\x0d\x4c\xd0\x3b\xd2\xe0\x77\xc8\xb3\xf0\x51\xd3\x12\x24\x32\xa2\xe9\x83\x29\x27\x41\x89\x02\x0d\x46\xf6\x11\x65\x95\x6d\x24\xee\x51\x22\x4f\x6d\xda\xea\xe6\xaf\xd5\x36\x6a\x78\x8d\x46\x63\xac\x02\x27\xba\x2a\xec\x81\x52\xd7\xbb\x1f\x8b\x32\xe4\x36\x76\x3e\xb9\x14\xb3\xdd\x09\xad\x45\x61\x04\xb6\x5f\xb5\x28\xcd\x67\x67\xc2\x2d\xc3\x07\x34\x90\x1e\x83\x90\x27\x25\xe1\x5a\xb4\x67\xca\xbf\xde\xf0\x2b\x52\xef\x59\x5d\x54\x51\x7e\xcf\xf0\x77\x7f\x36\x9d\x75\xd5\xd6\xa1\xce\xcd\x84\x34\x27\x9c\x23\x83\x70\xbc\x3d\xc5\x2d\xf7\xd2\xd9\x55\x0b\xeb\x97\xbe\x0c\x83\xe4\x40\x94\x46\x9b\xb6\x4b\xc1\x68\x7a\xb4\x6d\x0f\x65\xcd\x9e\xb9\xff\x72\x24\xd9\x7a\xd7\xb5\xeb\x2d\xf5\x5a\x5b\xb1\x8b\x4a\xa6\xdd\xc2\xc5\xc6\x68\x7c\xef\x35\xa7\x38\xe8\x74\x81\x7a\x51\xce\xd3\x62\x95\xb8\x19\x2a\x4d\xb9\x15\xf5\x8d\x7a\xdb\x97\x76\x03\x21\x7d\x01\x2d\x4a\x46\x51\xb9\x07\x57\xe6\xa4\x84\x5c\xe1\xd8\x76\xa6\x7a\x2a\x35\x51\x7d\x60\x5c\xb6\xfd\xb1\x86\x46\xa7\x47\xb3\x48\x47\xad\x63\xf9\x52\x3d\xf9\xf3\xb9\xd8\x87\x4e\x45\x50\x91\x44\xdb\xb5\xb0\xc7\xe4\xb1\x16\x53\xcd\x78\xc1\x01\x7e\x89\xfc\xde\xd9\x4f\x92\xdf\xf1\x78\x71\xd1\x7d\x74\xae\x11\x7d\xd8\x81\x31\xa7\x31\xf4\x99\x81\xaa\xd9\xd8\xea\x63\xe4\x12\x39\x0d\x76\x2c\x15\xf2\x23\x91\xa4\x40\x8d\x52\xb9\x34\x8c\x99\xc9\xc2\x46\xdc\x03\x39\x36\x50\x4e\x54\x49\xfd\xe9\xf9\x40\x14\x94\x28\xf7\x42\x16\x16\xcb\x57\x68\xbc\xa4\x25\x6a\x4d\xf9\xfd\x87\xd2\x75\xda\x16\x6d\x27\x3b\xff\x76\x3c\x04\x98\xa3\xd7\xa2\xed\x10\xc6\x26\x7a\xa2\x30\xd9\xd7\xec\xef\x79\x0c\x0a\x2c\x97\xd1\x11\x98\x4d\x36\x03\xea\x6e\xf2\xd1\xa2\x4a\x73\xb1\xdf\x0f\xd2\xc8\x60\x5e\x59\xeb\x70\x54\xed\x1d\xfa\x1d\x13\x07\x51\x0d\xeb\xc0\xd1\x09\x3d\x9b\x95\x51\x9b\x11\xf0\x7c\x67\xc3\x7b\xc0\x7f\x95\x9a\xea\x59\x5d\x75\x35\xd9\x39\x54\x48\x90\xec\x99\x38\x6c\xa5\x85\xf3\x19\x1d\xd6\x4c\x67\x52\xf4\xe8\xbc\x19\x94\x1f\x9d\x37\x8e\x9e\x95\xc2\xcc\xc2\x4e\xad\xd8\x0d\xd0\xfd\xac\xeb\x8f\xae\xf4\x04\x4c\x1d\xfb\x9b\x08\x88\xc1\xb2\x23\x67\x8e\xd9\x79\x11\xc5\xf8\xd2\xd4\x54\x49\xa1\x60\x15\x41\x1f\x8d\x96\xce\xa3\x17\x2f\xf6\xb3\xa8\xa4\x71\xcb\x73\x68\xc5\x70\x03\xc3\xad\x3e\xbd\x3c\x35\x0e\xeb\x55\xce\xe9\x2a\x8b\x28\xe7\xa9\x16\xe8\xb7\x41\xcc\xa7\x02\xdb\x21\x47\x9d\xa3\x04\x21\x81\x0b\x0d\x04\x02\x47\x73\x1c\x5a\x1b\x78\x35\xaa\xed\x84\x60\x48\xf8\xbc\xce\xa6\xb5\x30\x3e\x1a\x1f\x89\x1e\x39\x07\x42\xda\x83\xca\x9a\x02\xc9\x4c\xb0\xdd\x3f\x61\xfe\xa7\xa5\x32\x5f\x84\x84\x8a\x37\x4f\xdc\xb9\xe9\x94\x4e\xd8\xf7\xd8\xc8\x1a\x14\x06\x73\x87\x53\x7f\xe7\x8e\xa6\xe0\x75\x97\xc7\x64\x67\xe2\x32\x17\x07\xa8\x99\xd9\x7a\xa6\x75\xa9\x7c\xca\x79\x35\x96\xf9\x7a\xad\x88\xed\x5e\x30\x26\x0e\xeb\xcf\xa6\x0d\x8e\xcf\x40\x66\xd4\xcd\x3a\x90\xb7\x04\x60\xa2\x5c\x62\x1b\x59\xea\xbb\x74\x0f\x5a\x56\xb8\x01\x37\xaf\x5d\xe0\x5b\x7e\xed\xcb\xfc\xd9\xf3\xc9\x6c\x68\xc7\xa4\x2f\xe8\x57\x73\x22\x58\x2a\xb0\xaa\x8a\x82\x48\xfa\x3f\xb4\x22\x35\xe6\xf1\xcd\x78\xe7\x52\x84\x81\x63\xbb\x5c\xe6\xc9\x22\xab\xe7\x50\xe9\x31\x65\xa8\xba\xcd\x8f\x13\x9c\xac\x5e\x65\x61\x95\x15\xd6\x9f\xc3\xf3\x58\x6b\xcb\xe1\x8b\x51\x56\x41\xbf\x82\x63\x04\x3a\x27\x1a\x0e\x28\x71\x22\xe2\x46\x15\x37\x89\x58\x35\xf5\x32\xe4\x6a\xc8\x27\x11\x2c\xfc\x4d\x64\xbf\x56\xe5\xf9\xd4\xb8\xaa\x59\x9d\x14\xe3\x35\x97\xb3\xc4\x7a\xcd\x6d\x4d\xcc\xd7\x93\x9e\x31\xf6\xeb\x35\x16\xa7\xf7\x78\x7a\x1e\xeb\x2f\x2d\x4a\x4b\x71\xd6\x8f\xf1\xb4\x45\x24\x61\x0c\xd9\xe2\x9e\xaa\x44\xff\x62\x88\xb2\xf7\x9e\xca\xdd\x02\xf8\xd9\x3e\x86\x48\x37\x84\x40\x51\xe3\xf7\x84\xa3\xa8\x14\x3b\xc2\xee\x08\x04\x14\xda\x99\xbe\x21\xab\x4e\x49\x6c\x0d\x0f\x48\xbe\x50\x9e\x25\xb0\x81\x44\xd3\x02\xb7\xa8\x34\x2d\x3c\x04\xa5\x55\x51\xb9\x8b\x89\x6d\x77\x6c\x6d\xae\xb3\x4b\x58\xe7\xad\xdf\x21\x0b\x5a\xdc\xd6\xfd\x9f\xf8\x25\x60\x10\x74\x4d\x49\x65\xfb\x96\x6d\x55\x6d\x80\xf2\x0c\xbf\x62\x66\x14\x19\x1a\xda\xd3\x05\xd3\x32\x74\x2f\x89\xd6\x28\xf9\xc7\x85\xf0\xfb\xdf\x4f\xb7\x57\x7f\xff\xfc\xd7\xa9\x38\xee\xf5\xeb\x9f\xd5\xd9\xc3\xdb\x4e\x1d\xdb\x42\xb8\xe0\x88\x69\x37\x50\x59\x0f\xa6\x05\x82\x26\x5f\x90\x37\xcd\x3c\xca\x95\x96\x95\x7d\x0d\xcd\xe8\x1c\x14\xa6\x82\x67\x7d\x57\x1d\x28\x79\xa6\x76\x1d\xbc\x13\x53\xbf\x23\x35\xe6\xa0\xcb\x37\x61\xdf\xdf\x1a\x6c\x05\x41\x56\x1c\x94\x80\x3d\x91\x40\xf6\x1a\x87\xfb\x83\xdc\xd4\x99\xa2\x28\x19\x6a\xcc\x9e\x75\xb7\xe7\x2d\xbb\x35\x2d\xfd\x8b\x82\x4b\xeb\x6d\x68\xde\xd7\xb4\x3d\x68\x41\x32\x5b\x21\x85\x43\x8a\x85\x7a\x5a\x9e\x17\x91\xc2\xa5\xcf\x8b\x00\x53\xdc\x14\xcd\xbd\xa4\xd9\xa5\xbb\x41\xb5\x9f\x5e\xcf\x82\xe7\x03\xeb\x52\x28\x1a\x2e\xb0\x3a\x5b\xb7\x6d\x29\x21\x21\x93\xa2\xac\x95\x61\xc2\x13\x49\x9a\x07\x14\xbf\xfe\xde\xf0\xbb\xf7\xca\xc2\x2b\x7a\xbf\xa2\x77\xc7\x6a\x71\x48\xee\xbe\x3a\xbe\x18\x97\x09\x07\xe4\x9a\xca\xe6\xce\xd7\xc3\xf4\xc6\xf7\x73\x69\xbb\xe4\x34\xa1\xb5\x09\x58\xf2\x17\xe8\xd7\xb1\x4d\xa5\xde\xaa\x49\x99\xb8\xf7\x6f\x4e\xde\x4b\x51\x95\x83\x66\xdd\x2a\x8c\x0f\xb8\x9e\xe6\x94\x65\x12\xf9\xcb\x60\x7b\xab\xe8\x9c\xab\x35\xbd\x58\x6b\xe0\xcb\x4e\x9a\xfe\x31\xc3\x8a\x4b\xce\x65\x37\xee\xe3\x00\x35\xfd\xd3\x85\xf0\x37\xfe\x13\x86\xba\x34\x98\xeb\x0f\x8f\xdf\xf6\xf5\x4f\x47\x13\x7d\xd6\x61\x16\x85\x09\x74\x9c\x7b\x51\xe0\x15\x0d\x7f\x3c\x34\x3c\xb9\x85\xdc\xfe\xcd\xcc\xf2\xf6\x31\xe1\x60\x7f\x01\x26\x11\x39\x38\x1e\x1e\x30\x0f\x84\x6a\x65\x15\x57\x29\x94\x40\x79\x79\x5a\x07\x39\x40\x5e\x81\x4a\x91\xfb\xe1\xbd\xe9\x93\x8e\xce\x56\xe0\x38\x86\x85\x75\xd6\x40\x98\x9f\xe3\x40\x9f\x2a\x50\xb9\x38\xf0\xf0\xd6\x80\x51\xc3\x93\x5f\xcd\x38\xaf\xb1\x5b\x3f\x71\xfa\x9e\x4d\x9d\x55\x2e\x8b\x6e\xeb\x10\x7a\xe1\x2c\x67\x36\x16\xf7\x8e\x81\x68\x4b\xdd\x24\x17\x07\x60\xc2\x64\x33\x61\xf5\x66\xd4\xf6\x5c\x30\xd1\x1f\x7e\x85\xf6\x1f\x04\xda\xcf\x04\x47\x6f\xc2\x4d\xcc\xdb\x79\x64\x32\xa1\xcc\xd0\xba\xe4\xc4\x6f\x30\x5e\x02\xa7\x2e\x2f\x1e\xe1\xf2\xf1\xf2\xff\x01\x00\x00\xff\xff\xce\xd8\xc1\x19\x9d\x3c\x00\x00")

func actionsSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_actionsSchemaJson,
		"actions.schema.json",
	)
}

func actionsSchemaJson() (*asset, error) {
	bytes, err := actionsSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "actions.schema.json", size: 15517, mode: os.FileMode(0644), modTime: time.Unix(1553624599, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf0, 0x76, 0xe2, 0xfb, 0xd3, 0x60, 0x71, 0xb9, 0x74, 0x39, 0x37, 0xe0, 0x30, 0xc6, 0xa7, 0xfb, 0x60, 0xb0, 0xd5, 0x3, 0x5e, 0xb0, 0x62, 0x1c, 0x4f, 0x9b, 0xce, 0xe, 0x4, 0xe1, 0xb9, 0xe4}}
	return a, nil
}

var _layoutSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x5b\x6f\xdb\xb6\x17\x7f\x96\x3f\x05\xa1\x16\xc8\xc3\xdf\x89\xd3\x7f\x1f\x86\xe5\xad\x40\x5f\xba\x0d\x6b\xb1\x0e\xdb\x43\x90\x05\xb4\x74\x14\xb3\x95\x48\x95\xa4\xe2\xb8\x85\xbf\xfb\x70\x48\x4a\x22\x25\x4a\xbe\xb4\x1d\x30\x2c\xc0\x66\x59\x3e\x97\xdf\xb9\xf2\x1c\xf6\xcb\x22\x49\x9f\xb3\x3c\xbd\x21\xe9\x46\xeb\x5a\xdd\xac\x56\x94\xeb\x0d\xbd\xca\x44\xb5\x2a\xe9\x4e\x34\xfa\x52\x65\x1b\xa8\x68\xba\x44\x52\xf7\xec\xc8\x6f\x56\xab\x0f\x4a\x70\x47\x71\x25\xe4\xc3\x2a\x97\xb4\xd0\x97\xd7\x3f\xac\xec\xbb\x67\x86\x2d\x07\x95\x49\x56\x6b\x26\x38\xb2\xfe\xf4\xfe\xed\xaf\xe4\xbd\xf9\x9d\x14\x42\x92\x1c\xb2\x8f\xc4\x2a\x23\x3e\x29\xb2\xea\x5d\x0d\xc8\x23\xd6\x1f\x20\xd3\xe6\x95\x84\x4f\x0d\x93\x80\xa0\x6f\xd3\x35\x14\x42\x42\xba\x24\x29\x2d\x34\x48\x7c\xe0\xb0\xbd\x67\xb9\xc2\xc7\x47\x90\x0a\x25\xdd\x21\x5f\x2d\x45\x0d\x52\x33\x50\xe9\x0d\xf9\xb2\x20\xee\xaf\x23\xf2\x5f\x9a\x1f\x06\xb0\xf5\x06\x88\xa3\x25\xa2\x20\x7a\xc3\x14\x51\xbd\x15\x8f\xb4\x64\x39\x75\xc0\x03\x39\x99\xe0\x4a\xa3\x84\x17\x57\xd7\x69\xf7\xd3\x7e\xb9\x48\x92\x16\x3f\xea\x4e\x92\x24\x7d\x2e\xa1\x40\xca\x67\xab\x1c\x0a\xc6\x19\x8a\x53\x2b\x74\xd0\xfb\xa6\xaa\xa8\xdc\xa5\x8b\x24\xb1\x9c\xd6\xde\x33\x18\x5b\xff\xb4\xac\x63\x17\x27\xa3\x90\x55\xb4\x56\xa4\x90\xa2\x22\xe8\x05\x4b\x49\xde\xbc\x56\x84\x71\x72\x61\x6d\xb8\x20\x5a\x90\x0b\x83\xea\xc2\x09\xa1\x79\x6e\x80\xd0\xf2\x5d\xe8\xfb\xc4\xd7\xab\xb4\x64\xfc\xc1\xb2\x8c\x14\xbf\xe2\xe4\xcd\x6b\xa3\xc5\x49\x46\xaa\xfd\xc2\xfc\xb7\xb7\xb9\xd5\x99\xeb\x44\xa7\xbe\xd5\xa7\x18\xf9\xda\x7c\x5d\x83\x32\x46\xba\x84\x14\x05\xa1\xa4\x64\x9f\x1a\x96\x6f\x28\xcf\x4b\xc6\x1f\x6c\xc2\x52\x4d\x28\x79\x60\x8f\xc0\x49\x2d\x18\xd7\x08\x52\xb3\x0a\x9c\xec\x20\x4b\x6b\xa1\x1c\xc4\x3b\xfb\x6b\x1d\xf1\x47\x4f\xd4\xbe\x8a\xc3\x1e\x03\xff\x19\x76\x8a\x50\x09\x06\x37\xa7\x15\x28\x84\xdd\xc9\x23\x82\x9b\x5f\x0c\x6c\x93\xb9\x10\xb3\xa8\x93\x3e\x1b\xb6\xd9\x5c\x7b\xe7\x54\xa6\x96\x74\xbf\xe8\xfe\xbf\xef\xd2\x2f\xa0\x3b\x25\x3c\xb4\xb3\xa8\x35\x68\xd2\x88\xb8\xf7\xb1\x23\x28\xf6\x19\x8e\x09\x82\x17\x83\xb8\xb9\x99\x10\x32\x67\x9c\x6a\x50\x2f\xad\xb9\x7b\x97\xc1\x46\xc5\x09\xec\xff\x0f\xd9\x99\x86\xea\x70\x06\x08\x0e\x6f\x51\xec\x6d\x1b\x95\x29\x45\x75\x49\x35\xb8\x78\xb4\x3a\x92\xe4\x10\x97\x66\xf5\x5a\x3c\x9d\xc3\xb6\xa5\xca\xd3\x67\x3f\xef\xbc\x3c\x98\xed\x0c\x05\x2d\x15\x74\x99\x12\xf8\xe8\x94\x4c\xf9\x7d\x2b\x48\xce\x2a\xe0\xca\xa8\x20\x9e\xa0\x58\x7e\x3c\xdd\x57\x15\xe6\xc6\x0e\x3f\x67\x72\xc3\xd0\x8d\x23\xc3\x9b\x6a\x8d\x27\x4f\xbc\x36\x9f\x3c\xed\xd8\x22\xaa\x2a\x0c\xf7\xee\x1c\xa1\xbb\x29\xa1\x5f\xe1\xe2\x97\xa7\xb9\x78\x23\x01\xfe\xa3\x4e\x76\x42\x3f\x9f\x23\xf4\xf3\xb7\x8a\x9c\xdf\x26\xe2\x11\x0b\xdc\xcf\x72\x33\x1a\xd1\xca\xcc\x4a\x86\x7e\x89\xc7\x3a\x6f\x0a\x9a\xe9\x46\xda\xd1\x29\x98\xbe\x48\x2a\xc5\xd6\x8c\x51\x99\x28\x9b\x8a\x9b\xc7\x2e\xe2\xe6\xdb\x16\xca\xf2\x3e\xf2\x4a\x69\x2a\x75\xf7\xcd\x68\x9b\x09\xb9\x99\x3f\x87\x6e\x0c\xa6\x82\x48\xfa\x01\x69\x38\xfb\xd4\x00\x8e\x07\xee\x4c\x73\xd6\x07\x41\x32\x16\x9f\x23\x1d\x19\xbb\x31\xaf\xa6\x52\xb3\xac\x29\xa9\x8c\x2a\x71\x52\x4f\x57\x82\x94\xa1\x26\x2b\x7e\x49\xe0\xea\xe1\x8a\x5c\xd4\x99\x34\xfd\xfb\x22\xd4\x17\x84\xed\xeb\x8c\x03\xe2\x0b\x1b\xc0\x08\xb5\x86\x72\x4e\x53\xfa\x8a\xe0\x29\xbd\xf3\xc7\xfb\x59\x5d\x26\xf3\x4e\xad\x2d\x63\x99\xa1\x40\xd9\x28\x02\x3f\x31\x05\x15\x11\x92\x68\x56\x9b\x79\xd5\x57\xda\x4a\xaa\x9a\x52\xb3\xba\xb4\x67\xea\x8b\xab\xeb\xee\x3d\xe3\xac\x6a\xb0\xd0\xae\xaf\xae\x03\x84\x6d\x4d\x7c\x1d\x48\x27\xe5\x3b\xe2\xf4\xaa\xb3\x87\x1a\xc1\x84\x53\xcb\x30\x24\xcb\x33\x27\xa0\x61\x5b\x38\x52\x31\x1c\xe7\x83\xb3\xd0\xd8\x8e\x34\x0b\xa4\x9f\x2e\x2d\x98\x0c\xb8\x6e\x4b\x02\x48\x53\xd7\x20\x49\x09\x85\xbe\xac\x84\xd2\x06\xaa\x43\xfa\x4d\x81\x0e\x7a\xc9\x44\xd3\x58\xa2\x6a\x49\xf5\x06\xa4\x41\xa7\x36\xd4\xbc\xf4\xdd\xd8\xa2\xb2\x13\xe0\x72\xbe\x5e\x81\x9b\xec\xb9\x4d\xb3\x5d\xc9\x78\x6e\x8f\x83\xac\x59\x0b\x96\xa7\x77\xb1\x31\xde\x4a\x6d\x0f\xa0\x01\xcc\xdf\xa0\x96\xa0\x80\xe3\x8a\x64\x08\xfd\x15\xa4\x5d\x0e\xcb\xd2\x4e\xb0\xc1\xb2\x8c\x7f\x5f\xc8\x84\xeb\xcc\x99\x47\x9c\xbb\x5a\x0f\x45\x4e\x94\x24\x49\x3f\x32\xee\x9d\x2a\x63\x84\x8d\x82\x1c\x17\xd6\x47\x90\xac\xd8\x19\x6c\xf6\x50\xec\x18\xba\xad\x7d\x38\x41\x0f\xe1\x76\x7b\xbe\x04\xc5\xf2\x86\x96\xf7\x8f\x58\xd5\x30\xba\x50\x18\x31\x0c\x30\x59\x36\xb2\xdd\xb0\x6c\x43\x32\xca\xb9\xd0\x64\x0d\x44\x42\x25\x1e\x21\xef\xd7\x6f\x57\x25\x45\xeb\xdc\x74\x1a\x93\x51\x13\x77\x66\x05\x54\x35\x12\x2a\xe0\x3a\x9d\xe4\xef\x26\x7f\x74\x87\x06\xae\x55\xe0\xd4\x9a\x6a\x0d\x92\x47\xd7\xc4\x24\x49\xff\xba\xbd\xbe\xfc\xf1\xee\x7f\xcf\x83\xb7\x91\xbd\xce\x76\xc1\xae\x09\xf6\x41\x98\xdc\x7f\x8e\xd0\x3e\xa9\x7f\x8c\xc0\x54\xbb\xb3\xcf\xaf\x21\xdc\xf1\xf1\xb9\xdd\xf2\x5d\x7f\x60\x36\x97\x2d\x6a\x1f\xd1\x64\xcd\xdb\x45\x35\xf5\x28\xf7\xfd\xf3\xde\xb7\xe9\xc0\xec\x37\x60\xee\x59\x8f\x61\x74\x6c\x2d\x53\x38\x20\x9a\x82\x59\x8e\x93\x98\x78\xd5\x7f\xd7\x55\xbf\xdb\x0f\x8f\x28\x7f\x4b\x39\x57\xff\xf3\x8b\xb2\xa9\x79\xbf\x4d\xfe\x63\x75\x3f\xb1\x03\xa7\x15\x53\x8a\xf1\x87\x7b\x3c\xa3\xe6\x54\xfd\xc2\x94\xb6\x57\x49\xfd\x4d\x0c\xd5\xae\xbc\xcd\x01\x47\x25\x10\x2c\x72\xe7\x2d\x0f\x44\x9b\xf5\x54\x4a\xba\xf3\xde\xa3\x37\x06\x45\x36\xd0\xfa\x27\xe6\xad\x77\xc6\x74\x63\x9e\x45\x8d\x8a\xbd\x94\x9d\x2e\xaf\x30\x3b\xa4\xd8\xba\x45\xc0\x0d\xf2\x33\x31\x70\xf3\xdb\xb0\x18\xe3\xe3\x91\x73\x69\x7c\xac\x69\xfd\x3d\x9c\x6d\xc6\x65\x83\xc0\xbe\xb7\xbe\x45\x44\xf3\x51\xf5\xba\x3f\xba\xfe\xa6\x6a\xcd\x5e\xaa\x1c\x57\x6d\x86\xf6\x5f\x5a\x6f\xe1\xe5\x51\x57\x71\x39\x53\x19\x95\x39\xe4\xe3\x9a\x9b\x8a\xf2\xfc\xd8\xdd\x09\xf4\x06\x4d\x20\x56\x7b\x2f\x62\x32\x4b\xa2\x29\x72\x66\x74\xdd\xd1\x30\x11\xdb\xf6\x4a\xba\xbb\x83\x46\xac\xed\x4c\x85\x47\x94\x0b\xee\xe1\x0b\x80\x6e\xf5\x17\xba\x6f\xee\x33\x4b\xf9\x60\x71\x8e\xb8\x33\x67\xaa\x2e\xe9\x2e\x58\x26\x9d\x35\x13\xc3\x66\x30\xed\x06\x40\xe6\x07\x5e\xa4\x24\x6e\x3a\x6a\x73\x3d\xae\xf0\x88\x51\x27\x09\x96\xb8\xaa\x16\x3c\x1c\x6b\xa2\x3b\x4a\xb3\xbe\xec\x69\x5d\x0b\xaf\xe8\x47\x5c\x0b\xec\x90\x3d\x61\x78\xd0\xbf\x47\xdd\x7b\xbc\x25\xab\x66\x4d\x3a\x45\x5d\x2a\x4e\x75\xe9\x78\x84\x33\xc1\x71\x75\x91\xb4\xbd\xc6\x69\x38\xd3\x7d\xdb\x9e\x68\xda\x83\x80\x4f\x4c\x49\xb1\x98\x07\xce\x89\x9d\x2d\x7e\xf4\xc3\xa1\x25\x84\x7a\x48\x79\x40\x7d\xb4\xf6\x51\xff\x8f\x37\x78\x0f\x95\xf1\xd7\x21\x30\x48\x64\x3a\x87\x3b\xcf\x47\xf8\x98\x22\xf0\x84\xd9\xaa\x20\x3f\xc6\x2b\xa3\xae\x77\xf8\x68\xd9\x1f\xf8\x17\x9b\x9e\xf4\xe4\xeb\x45\xbf\x64\x26\x7a\xd3\x2b\xe2\x11\x2d\xb1\xad\xb3\x8c\x96\xe5\xce\x6e\x26\x7f\xd8\xc2\x3e\xb6\x3d\x3d\xd2\xb2\x81\x41\xb2\x46\xfb\x92\x25\x9c\xad\x56\x43\xd2\xcd\x3d\x9e\x21\xc3\xea\x74\xa9\x11\xb4\x84\x30\xf8\x13\xf7\x8e\xc3\xc8\x7b\x4a\xa2\x71\x8f\x37\xc2\x13\x62\xb2\x48\xf6\x8b\xfd\xe2\xef\x00\x00\x00\xff\xff\x94\x3f\x47\xf0\xae\x1f\x00\x00")

func layoutSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_layoutSchemaJson,
		"layout.schema.json",
	)
}

func layoutSchemaJson() (*asset, error) {
	bytes, err := layoutSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layout.schema.json", size: 8110, mode: os.FileMode(0644), modTime: time.Unix(1553269380, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0x9e, 0x59, 0x28, 0x2a, 0x44, 0x5c, 0xb1, 0xc3, 0xd6, 0x5a, 0xf2, 0xeb, 0x2b, 0x69, 0xed, 0xf5, 0x8a, 0x34, 0x89, 0x50, 0xdc, 0xfe, 0xa, 0x6e, 0xf5, 0x86, 0x6e, 0x23, 0x1e, 0x87, 0xf8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"actions.schema.json": actionsSchemaJson,

	"layout.schema.json": layoutSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"actions.schema.json": &bintree{actionsSchemaJson, map[string]*bintree{}},
	"layout.schema.json":  &bintree{layoutSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
