// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/actions.schema.json (16.024kB)
// schemas/layout.schema.json (8.148kB)

package liquidhandling

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _actionsSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x6f\xdc\xb8\x11\x7f\xb6\xff\x8a\x81\xee\x50\x24\xe8\xc6\x4e\x9e\x8a\xfa\x2d\xc0\xbd\x5c\x51\x34\x01\xee\xda\x97\x20\x5d\x70\xa5\xd9\x15\x2f\x14\xa9\x23\x29\x6f\xb6\x81\xff\xf7\x82\x5f\xfa\xa4\xbe\xbc\x6b\x23\x87\xb3\x1f\x12\x5b\x1c\x0e\x67\x86\x33\x3f\xce\x0c\xa5\x6f\xd7\x57\xc9\x8f\x34\x4b\xee\x20\xc9\xb5\x2e\xd5\xdd\xed\x2d\xe1\x3a\x27\x37\xa9\x28\x6e\x49\xaa\xa9\xe0\xea\x8d\x4a\x73\x2c\x48\xb2\x31\xb4\xfe\x77\x4f\x7f\x77\x7b\xfb\x9b\x12\xdc\x53\xdc\x08\x79\xb8\xcd\x24\xd9\xeb\x37\x6f\xff\x76\xeb\x9e\xfd\x60\xa7\x65\xa8\x52\x49\x4b\xc3\xce\x4c\xfd\xc7\x2f\x1f\xfe\x05\xbf\xd8\x71\xd8\x0b\x09\x6e\x78\x47\xf9\x01\xfc\x9a\x90\x12\x29\x29\x66\x20\x2a\x0d\x59\x25\xcd\x10\xa3\xbf\x57\x34\xcb\x09\xcf\x18\xe5\x87\x64\x73\x0d\x00\x90\xe8\x53\x89\x86\xa7\xd8\xfd\x86\xa9\x0e\x4f\x25\xfe\x5e\x51\x89\x46\xb1\x4f\xc9\x3d\x4a\x65\x56\xde\x40\xe2\xd9\x27\x9f\x3d\x5d\x29\x45\x89\x52\x53\x54\xc9\x1d\x7c\xb3\xcf\xec\xf3\x30\xa5\xfd\xd0\x0e\xf4\x34\xd1\x39\x82\xa7\x05\xb1\x07\xf3\xa7\xd3\x7b\x63\x15\xbb\x27\x8c\x66\xc4\x12\x6f\xba\x7c\x52\xc1\x95\x36\x1c\xde\xdd\xbc\x4b\xea\xa1\x87\x86\xaa\x16\x75\x89\x08\x13\x56\x33\xc3\x5d\xcb\x81\x51\x39\x2a\x54\xb0\x25\x91\x92\x9c\xfa\x83\x05\xe5\x3f\x6b\x2c\x8c\x40\xef\x7a\x43\xd4\x3f\xef\x0a\x6a\x87\x04\xc7\x0f\x7b\xb3\x0b\x83\x21\xf3\xf3\x0d\x92\x1f\x25\x9a\xf1\xe4\x87\xdb\x0c\xf7\x94\x53\xab\xc8\xad\x96\x84\xab\x3d\xca\xf7\x56\xb1\xa4\x6d\x98\x45\xf3\x4b\x29\x8a\x52\x3f\x76\xf6\x91\xd0\x66\xee\x60\xea\xe7\xce\x93\x66\xdc\xfd\xf6\xe0\xfc\xbd\x66\x66\xcd\x72\x75\x95\xb8\x3d\xf0\x7f\x0d\x22\xe2\x27\x17\x01\x08\xc4\x6f\x16\x50\x0e\x04\x4a\x46\x34\xc2\x11\x19\x33\x61\x74\x75\x35\xf4\x76\xf3\xb0\xe3\xec\x9c\x14\x68\x3c\x5d\x0b\x4d\xd8\xf6\x5e\xb0\xaa\x40\xe3\xee\x86\xb0\xe7\xed\x57\xe6\x99\xa5\x0f\x7f\x0d\xe4\xfa\x35\x47\xc8\xa8\x2a\x19\x39\x81\xa1\x0c\x4e\xee\xb5\xd9\xf8\x59\x41\x2c\xa5\x8d\xcf\x25\xf6\xe9\x83\x1b\xec\x0a\x32\xb9\x90\xa5\x04\x47\x09\xa5\x44\x85\x5c\x8f\x2c\x18\xdf\xb7\x02\x89\xaa\x24\x16\xc8\x75\x57\x06\x25\x2a\x99\xb6\xb4\x1e\x2c\xef\x11\x08\x55\x6b\x31\x05\xc7\x9c\xa6\x39\x1c\x51\x22\xa4\xa2\xd8\x51\x8e\x19\x68\x61\x22\xbb\x00\x9d\x53\xd5\xde\x2b\xb9\xa3\x5a\x12\x79\x02\x21\x33\x94\x03\xcb\x84\x90\x72\x4f\x9b\x80\xb9\x8a\x8a\xf3\x1e\x9c\xc4\xde\x18\x61\x5e\x7c\xff\x47\x5d\x20\x4c\x86\xa4\xe2\x54\x7b\x27\x18\xf1\x83\xa1\x2b\x44\xc4\x32\xb6\x69\x7b\x81\x13\x72\xe3\xed\xa4\x72\x51\xb1\x0c\x72\x72\x8f\x50\x20\xe1\x16\x7d\x84\x25\xac\x54\x63\x92\x31\x7f\x69\xb6\xcb\x50\xf4\xfd\x65\x44\x1a\xef\x2c\x56\x1e\xaa\x82\xd5\x74\x4e\x34\x1c\x89\x02\x92\x65\x98\xc5\x16\xe6\x55\xb1\xeb\x8a\x54\x50\x4e\x8b\xaa\x48\xee\xe0\xed\xcd\xdb\x88\x40\xd6\x84\x73\xe2\x18\x22\x65\xdc\xc1\x59\xa4\x25\x21\x55\x80\x5f\x8d\x4f\xab\xb8\x40\x7d\x4b\x5c\xf7\x04\x48\x48\x96\x59\x2f\x27\xec\x63\x7b\xf7\xf6\x84\x29\xbc\xee\xd0\xce\x93\x5a\xee\x8e\x7c\x8e\xd8\x52\x25\xed\xc0\x1a\x41\xb0\xf7\xd0\x22\xda\x80\x3e\x95\x34\x25\x8c\x9d\xcc\xde\x10\xf8\x4f\xcb\x8f\x17\x80\xd8\x3d\x61\x55\xdf\x71\xa3\xe8\xe5\x08\x27\x51\xc5\x92\x04\x8f\x6d\x2b\xd2\x0f\x51\xef\x13\x1d\xe0\xe8\xee\x7a\x8c\x7d\x64\xcb\x5b\x8b\x44\xf7\x3d\x0e\x97\xd7\xfe\x9f\x76\x0e\x60\x90\xff\x9f\x22\x25\x7a\x69\x2e\xc2\x3c\xb1\xb3\xba\x99\x0e\x47\xaa\x73\x7b\x98\xf4\xb2\x00\x29\x76\x42\x8f\x65\x00\x9d\x6c\xaa\x1e\x6d\xef\x91\x59\x3e\xfd\xb2\x35\x48\xb6\x35\xc0\x0c\x89\x14\x47\xf3\x5f\x2a\x58\x02\x9f\x7b\x33\x47\xf2\xac\x96\x2a\x2d\x5e\x31\x8a\x8e\x74\xde\x6e\xf1\x53\x3d\xb6\x49\x3f\xff\x64\x0d\xc2\xc1\x2c\x01\xaf\x4a\x49\x85\x34\xd8\xd4\x35\xc9\xeb\x64\xc0\x30\x92\x39\x58\x3d\x67\x45\xac\x01\x66\x89\x88\x66\xe7\xa4\x38\xd6\x67\x5d\xd8\xf1\x91\xd9\x45\xc5\x34\x2d\x99\x4b\xac\xde\xdd\xbc\x1d\x23\xeb\x20\xda\x12\xcd\xcc\xd6\x5d\x5e\xb3\xd4\xc4\x3e\x7f\x5e\xe5\xae\x27\x54\x9d\x86\xbc\xc8\x24\x93\xac\x6b\xe4\xfa\xdf\x65\x46\x34\xce\xc6\x61\x65\xc9\x5c\x26\xe1\x67\xaa\x26\x1e\xcf\x89\x38\x26\x52\x13\x61\x1c\x8f\x5b\xcf\x78\x7d\xa4\x19\x1e\x77\x13\xa9\x6f\x1b\x71\xa2\x4e\xd2\x5e\x7d\x82\x91\x4f\xd8\x2e\xbd\x15\x39\xd2\x43\xae\x67\xf7\xc0\x04\xbd\x23\x0d\x7e\x87\x3c\x0b\xbf\x6a\x5a\x82\x44\x46\x34\xbd\x37\x49\x27\x28\x51\xa0\xc1\xc8\x3e\xa2\xac\xda\x1b\x89\x7b\x94\xc8\x53\x97\x79\x75\xce\xaf\xd5\x7b\xd4\xf0\x1a\x8d\xc6\x58\x9e\x4e\x74\x55\xd8\xb2\x53\xd7\xda\x8f\x45\x19\x72\x1b\x3b\x9f\xdc\x11\xb3\xdd\x09\xad\x45\x61\x04\xb6\x7f\x6a\x51\x9a\xdf\xdd\x16\x6e\x19\xde\xa3\x81\xf4\x18\x84\x3c\xea\x10\xae\x45\x7b\xa2\xf3\xd7\x6f\xfc\x8a\xa3\xf7\xa2\x2e\xaa\x28\x3f\x30\xfc\xd5\x57\xb0\xb3\xae\xda\x2a\xfd\xdc\x4c\x48\x73\xc2\x39\x32\x08\x45\xf0\x39\x6e\xb9\x97\x6e\x5f\xb5\xe8\x56\x04\x47\xa2\x34\xda\x63\xbb\x14\x8c\xa6\x27\xdb\x1c\x51\x76\xdb\x33\xf7\x5f\x8e\x24\x5b\xef\xba\x76\xbd\xa5\x5e\xdb\xd4\x10\x9d\xc4\xc5\xc6\x68\x5c\xf7\x9a\x53\x1c\x74\xba\x40\xbd\xe8\xcc\xd3\x62\x95\xb8\x19\x2a\x4d\xb9\x15\xf5\x95\x7a\xdd\x97\x76\x03\xe1\xf8\x02\x5a\x94\x8c\xa2\x72\x0f\xde\x98\x1a\x1a\xb9\xc2\x31\x75\xa6\x3a\x2f\x35\x51\x5d\x35\x2e\x53\x7f\xac\xed\xd1\xe9\xe4\x2c\xb2\x51\xab\x18\x5b\x6a\xa7\xa6\x30\xf3\x35\x72\x30\x91\x44\x5b\x2f\xdb\x72\x6d\xac\x11\x55\x33\x5e\x50\xe6\x2f\x91\xdf\x3b\xfb\x59\xf2\x3b\x1e\xcf\x2e\xba\x8f\xce\x35\xa2\x0f\xfb\x34\xa6\x1a\x43\x7f\x32\x50\x35\x1b\x5b\x7d\x8c\x5c\x22\xa7\xc1\x8e\xa5\x42\x7e\x24\x92\x14\xa8\x51\x2a\x77\x0c\xbb\xae\x8a\x11\xf7\x48\x4e\x0d\x94\x13\x55\x52\x67\x63\x5b\xcb\x97\x28\xf7\x42\x16\x16\xcb\x57\x58\xbc\xa4\x25\x6a\x4d\xf9\xe1\x43\xe9\xfa\x71\x8b\xd4\xc9\x2e\xaf\x8e\x87\x00\x53\x7a\x2d\x52\x87\x30\x36\xd1\x39\x85\xc9\xee\x67\x5f\xe7\x31\x28\xb0\x5c\x46\x47\x60\xf6\xb0\x19\x50\x77\x0f\x1f\x2d\xaa\x34\x17\xfb\xfd\xe0\x18\x19\xcc\x2b\x6b\x1b\x8e\x9a\xbd\x43\xbf\x63\xe2\x28\xaa\x61\x1e\x38\x3a\xa1\xb7\x67\x65\x74\xcf\x08\x78\xbe\xb3\xe1\x3d\xe0\xbf\xca\x4c\xf5\xac\xae\xb9\x9a\xd3\x39\x64\x48\x90\xec\x99\x38\x6e\xa5\x85\xf3\x19\x1b\xd6\x4c\x67\x8e\xe8\xd1\x79\x33\x28\x3f\x3a\x6f\x1c\x3d\x2b\x85\x99\x85\x9d\xda\xb0\x1b\xa0\xfb\x59\xd7\x1f\x5d\xe9\x11\x98\x3a\xf6\x33\x11\x10\x83\x65\x47\x6a\x8e\xd9\x79\x11\xc3\xf8\xd4\xd4\x64\x49\x21\x61\x15\xc1\x1e\x8d\x95\x2e\x63\x17\x2f\xf6\x93\x98\xa4\x71\xcb\x4b\x58\xc5\x70\x03\xc3\xad\xae\x5e\x1e\x1b\x87\xf5\x2a\x97\x74\x95\x45\x94\xf3\x54\x0b\xec\xdb\x20\xe6\x63\x81\xed\x98\xa3\xce\x51\x82\x90\xc0\x85\x06\x02\x81\xa3\x29\x87\xd6\x06\x5e\x8d\x6a\x3b\x21\x18\x12\x3e\x6f\xb3\x69\x2b\x8c\x8f\xc6\x47\xa2\x25\xe7\x40\x48\x5b\xa8\xac\x49\x90\xcc\x04\xdb\xfd\x13\xe6\x7f\x5a\x2a\xf3\x87\x90\x50\xf1\xe6\x89\xab\x9b\xce\xe9\x84\x7d\x8f\x8d\xac\x41\x62\x30\x57\x9c\x36\xf7\x62\xc2\xcd\x00\xb2\x33\x71\x99\x8b\x23\xd4\xcc\x6c\x3e\xd3\xba\x7a\x3e\xa7\x5e\x8d\x9d\x7c\xbd\x56\xc4\x76\x2f\x18\x13\xc7\xf5\xb5\x69\x83\xe3\x33\x90\x19\x75\xb3\x0e\xe4\x2d\x01\x98\x28\x97\x98\x22\x4b\x7d\x97\xee\x41\xcb\x0a\x37\xe0\xe6\xb5\x13\x7c\xcb\xaf\x7d\xe5\x3f\x5b\x9f\xcc\x86\x76\x4c\xfa\x82\x7e\x35\x15\xc1\x52\x81\x55\x55\x14\x44\xd2\xff\xa1\x15\xa9\xd9\x1e\xdf\x8c\x77\x2e\x45\x18\x38\xb6\xcb\x65\x9e\x4c\xb2\x7a\x0e\x95\x9e\x52\x86\xaa\xdb\xfc\x38\xc3\xc9\xea\x55\x16\x66\x59\x61\xfd\x39\x3c\x8f\xb5\xb6\x1c\xbe\x18\x63\x15\xf4\x2b\x38\x46\xfe\x6e\xd3\x5e\x49\x8f\x46\xdc\xa8\xe1\x26\x11\xab\xa6\x5e\x86\x5c\x0d\xf9\x24\x82\x85\x9f\x89\xd3\xaf\x95\x79\x3e\x36\xae\x6a\x56\x67\xc5\x78\xcd\xe5\x22\xb1\x5e\x73\x5b\x13\xf3\xf5\xa4\x27\x8c\xfd\x7a\x8d\xc5\xc7\x7b\xfc\x78\x1e\xeb\x2f\x2d\x3a\x96\xe2\xac\x1f\xe2\xc7\x16\x91\x84\x31\x64\x8b\x7b\xaa\x12\xfd\xeb\x23\xca\xde\x7b\x2a\x77\x0b\xe0\x67\xfb\x18\x22\xdd\x10\x02\x45\x8d\xdf\x13\x8e\xa2\x52\xec\x04\xbb\x13\x10\x50\x68\x67\xfa\x86\xac\x3a\xe7\x60\x6b\x78\x40\xf2\x85\xf2\x2c\x81\x0d\x24\x9a\x16\xb8\x45\xa5\x69\xe1\x21\x28\xad\x8a\xca\x5d\x4c\x6c\xbb\x63\x6b\xcf\x3a\xbb\x84\x75\xde\xfa\x4d\xb3\x60\xc5\x6d\xdd\xff\x89\x5f\x02\x06\x41\xd7\xa4\x54\xb6\x6f\xd9\x36\xd5\x06\x28\xcf\xf0\x2b\x66\xc6\x90\xa1\xa1\x3d\x9d\x30\x2d\x43\xf7\x92\x68\x8d\x92\x7f\x5c\x08\xbf\xff\xfd\xf4\xf6\xcd\xdf\x3f\xff\x75\x2a\x8e\x7b\xfd\xfa\x27\x75\xf6\xf0\x4e\x54\x67\x6f\x21\x5c\x70\xc4\xac\x1b\xa8\xac\x07\xd3\x02\x41\x93\x2f\xc8\x9b\x66\x1e\xe5\x4a\xcb\xca\xbe\xac\x66\x6c\x0e\x0a\x53\xc1\xb3\xbe\xab\x0e\x8c\x3c\x93\xbb\x0e\x5e\x86\x09\x92\x8f\x3a\xe8\x72\x25\xec\x5b\x5e\x03\x55\x10\x64\xc5\x41\x09\xd8\x13\x09\x64\xaf\x71\xa8\x1f\xe4\x26\xcf\x14\x45\xc9\x50\x63\xf6\xa4\xda\x5e\x36\xed\xd6\xb4\xf4\xaf\x13\x2e\xcd\xb7\xa1\x79\xab\xd3\xf6\xa0\x05\xc9\x6c\x86\x14\x8a\x14\x0b\xf5\xb4\xbc\x2c\x22\x85\x4b\x9f\x67\x01\xa6\xf8\x56\x34\xf7\x92\x46\x4b\x77\x83\x6a\x7f\x7b\xa9\x05\x2f\x07\xd6\xa5\x50\x34\x5c\x60\x75\x54\xb7\x6d\x29\x21\x21\x93\xa2\xac\x8d\x61\xc2\x13\x49\x9a\x07\x14\xbf\xf9\xde\xf0\xbb\xf7\xca\xc2\x0b\x7a\xbf\xa0\x77\x67\xd7\xe2\x90\xdc\x7d\xc1\x7c\x31\x2e\x13\x0e\xc8\x35\x95\xcd\x9d\xaf\x87\xe9\xf0\x16\x2c\x6d\xa7\x9c\x26\xb4\x36\x01\x4b\xfe\x02\xfd\x3c\xb6\xc9\xd4\x5b\x39\x29\x13\x07\xff\xe6\xe4\x41\x8a\xaa\x1c\x34\xeb\x56\x61\x7c\xc0\xf5\x34\xa7\x2c\x93\xc8\x9f\x07\xdb\x5b\x49\xe7\x5c\xae\xe9\xc5\x5a\x03\x5f\x76\xd2\xf4\x27\x0f\x2b\x2e\x39\x97\xdd\xb8\x8f\x03\xd4\xf4\x07\x0e\xe1\x67\xfc\x43\x87\x3a\x35\x98\xeb\x0f\x8f\xdf\xf6\xf5\xab\xa3\x89\x3e\xeb\xf0\x14\x85\x09\x74\x9c\x7b\x51\xe0\x05\x0d\xff\x78\x68\x78\x76\x0b\xb9\xfd\x65\xcd\xf2\xf6\x31\xe1\x60\xbf\x13\x93\x88\x1c\x1c\x8f\xf0\x79\x05\xa1\x5a\x59\xc3\x55\x0a\x25\x50\x5e\x9e\xd7\x41\x0e\x90\x57\xa0\x52\xe4\x80\xeb\x10\x6f\x75\x4f\x39\x56\x67\x5b\xed\xe2\x80\x17\x84\x5a\x83\x77\x7e\x8e\x3b\x21\xa8\x02\x95\x8b\x23\xef\x7d\x59\x11\xe5\xb5\xe0\x3d\x8e\x97\x08\xfe\xf3\x45\x70\xeb\xeb\xb6\xef\x39\x7e\xb3\xca\xa5\x46\xdb\xda\xaa\xcf\x9c\xba\x18\xc5\xe2\x51\x3c\x10\x6d\x69\x38\xe7\xe2\x08\x4c\xb8\xef\xa2\x0c\x7b\x63\xb6\xa7\xf2\x9c\xfe\xf0\x4b\xb4\xff\x41\xa2\xfd\x42\xc7\xc6\xab\x70\xbd\xf6\x7a\xfe\x04\x31\xa1\xcc\xd0\xba\xe4\xc4\x87\x35\xb3\xe7\xc9\x05\x70\xea\xfa\xea\x01\xae\x1f\xae\xff\x1f\x00\x00\xff\xff\x57\x5b\xfe\xc0\x98\x3e\x00\x00")

func actionsSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_actionsSchemaJson,
		"actions.schema.json",
	)
}

func actionsSchemaJson() (*asset, error) {
	bytes, err := actionsSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "actions.schema.json", size: 16024, mode: os.FileMode(0644), modTime: time.Unix(1556810919, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3e, 0xed, 0xf7, 0xda, 0x32, 0x11, 0x7, 0x63, 0x79, 0xaa, 0x1a, 0x2a, 0x4d, 0x37, 0x48, 0x7b, 0xe2, 0xb9, 0x67, 0x24, 0xb4, 0xb, 0xfe, 0x31, 0x2e, 0x76, 0x35, 0x45, 0x78, 0x86, 0x6f, 0x9f}}
	return a, nil
}

var _layoutSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x5d\x6f\xdb\x36\x17\xbe\x96\x7f\x05\xa1\x16\xc8\xc5\xeb\xc4\xe9\xdb\x8b\x61\xb9\x2b\xd0\x9b\x6e\xc3\x5a\xac\xc3\x76\x11\x64\x01\x2d\x1e\xc7\x6c\x25\x52\x25\x29\x3b\x6e\xe1\xff\x3e\x1c\x92\x92\x49\x89\x52\x6c\xb7\x1d\x30\x2c\x40\x6b\x59\x3a\x1f\x0f\xcf\xf7\x91\xbf\xcc\xb2\xfc\x39\x67\xf9\x0d\xc9\xd7\xc6\xd4\xfa\x66\xb1\xa0\xc2\xac\xe9\x55\x21\xab\x45\x49\x77\xb2\x31\x97\xba\x58\x43\x45\xf3\x39\x92\xfa\x6b\x4f\x7e\xb3\x58\x7c\xd0\x52\x78\x8a\x2b\xa9\x1e\x16\x4c\xd1\x95\xb9\xbc\xfe\x61\xe1\xee\x3d\xb3\x6c\x0c\x74\xa1\x78\x6d\xb8\x14\xc8\xfa\xd3\xfb\xb7\xbf\x92\xf7\xf6\x39\x59\x49\x45\x18\x14\x1f\x89\x53\x46\x42\x52\x64\x35\xbb\x1a\x90\x47\x2e\x3f\x40\x61\xec\x2d\x05\x9f\x1a\xae\x00\x41\xdf\xe6\x4b\x58\x49\x05\xf9\x9c\xe4\x74\x65\x40\xe1\x85\x80\xed\x3d\x67\x1a\x2f\x37\xa0\x34\x4a\xba\x43\xbe\x5a\xc9\x1a\x94\xe1\xa0\xf3\x1b\xf2\x65\x46\xfc\x5f\x47\x14\xde\xb4\x0f\x7a\xb0\xcd\x1a\x88\xa7\x25\x72\x45\xcc\x9a\x6b\xa2\x0f\xa7\xd8\xd0\x92\x33\xea\x81\x47\x72\x0a\x29\xb4\x41\x09\x2f\xae\x5e\xe4\xdd\xa3\xfd\x7c\x96\x65\x2d\x7e\xd4\x9d\x65\x59\xfe\x5c\xc1\x0a\x29\x9f\x2d\x18\xac\xb8\xe0\x28\x4e\x2f\xd0\x40\xef\x9b\xaa\xa2\x6a\x97\xcf\xb2\xcc\x71\xba\xf3\x9e\xc1\xd8\xda\xa7\x65\x1d\x9a\x38\x1b\xb8\xac\xa2\xb5\x26\x2b\x25\x2b\x82\x56\x70\x94\xe4\xcd\x6b\x4d\xb8\x20\x17\xee\x0c\x17\xc4\x48\x72\x61\x51\x5d\x78\x21\x94\x31\x0b\x84\x96\xef\x62\xdb\x67\xa1\x5e\x6d\x14\x17\x0f\x8e\x65\xa0\xf8\x95\x20\x6f\x5e\x5b\x2d\x5e\x32\x52\xed\x67\xf6\xdf\xde\xc5\x56\x77\x5c\x2f\x3a\x0f\x4f\x7d\xca\x21\x5f\xdb\xaf\x4b\xd0\xf6\x90\x3e\x20\xe5\x8a\x50\x52\xf2\x4f\x0d\x67\x6b\x2a\x58\xc9\xc5\x83\x0b\x58\x6a\x08\x25\x0f\x7c\x03\x82\xd4\x92\x0b\x83\x20\x0d\xaf\xc0\xcb\x8e\xa2\xb4\x96\xda\x43\xbc\x73\x4f\xeb\x84\x3d\x0e\x44\xed\xad\x34\xec\x21\xf0\x9f\x61\xa7\x09\x55\x60\x71\x0b\x5a\x81\x46\xd8\x9d\x3c\x22\x85\x7d\x62\x61\xdb\xc8\x85\xd4\x89\x3a\xe9\x93\x6e\x9b\x8c\xb5\x77\x5e\x65\xee\x48\xf7\xb3\xee\xff\x7d\x17\x7e\x11\xdd\x29\xee\xa1\xdd\x89\xda\x03\x8d\x1e\x22\x6d\x7d\xac\x08\x9a\x7f\x86\x63\x9c\x10\xf8\x20\x7d\xdc\x42\x4a\xc5\xb8\xa0\x06\xf4\x4b\x77\xdc\xbd\x8f\x60\xab\xe2\x04\xf6\xff\xc7\xec\xdc\x40\xf5\x74\x04\x48\x01\x6f\x51\xec\x6d\xeb\x95\x31\x45\x75\x49\x0d\x78\x7f\xb4\x3a\xb2\xec\x29\x2e\xc3\xeb\xa5\x7c\x3c\x87\x6d\x4b\x75\xa0\xcf\x7d\xde\x05\x71\x30\x59\x19\x56\xb4\xd4\xd0\x45\x4a\x64\xa3\x53\x22\xe5\xf7\xad\x24\x8c\x57\x20\xb4\x55\x41\x02\x41\xa9\xf8\x78\xbc\xaf\x2a\x8c\x8d\x1d\x7e\x4e\xc4\x86\xa5\x1b\x7a\x46\x34\xd5\x12\x3b\x4f\x3a\x37\x1f\x03\xed\x58\x22\xaa\x2a\x76\xf7\xee\x1c\xa1\xbb\x31\xa1\x5f\x61\xe2\x97\xa7\x99\x78\xad\x00\xfe\xa3\x46\xf6\x42\x3f\x9f\x23\xf4\xf3\xb7\xf2\x5c\x58\x26\xd2\x1e\x8b\xcc\xcf\x99\x1d\x8d\x68\x65\x67\x25\x4b\x3f\xc7\xb6\x2e\x9a\x15\x2d\x4c\xa3\xdc\xe8\x14\x4d\x5f\x24\x57\x72\x6b\xc7\xa8\x42\x96\x4d\x25\xec\x65\xe7\x71\xfb\x6d\x0b\x65\x79\x9f\xb8\xa5\x0d\x55\xa6\xfb\x66\xb5\x4d\xb8\xdc\xce\x9f\x7d\x33\x46\x53\x41\x22\xfc\x80\x34\x82\x7f\x6a\x00\xc7\x03\xdf\xd3\xfc\xe9\x23\x27\xd9\x13\x9f\x23\x1d\x19\xbb\x31\xaf\xa6\xca\xf0\xa2\x29\xa9\x4a\x2a\xf1\x52\x4f\x57\x82\x94\xb1\x26\x27\x7e\x4e\xe0\xea\xe1\x8a\x5c\xd4\x85\xb2\xf5\xfb\x22\xd6\x17\xb9\xed\xeb\x0e\x07\x24\x14\xd6\x83\x11\x6b\x8d\xe5\x9c\xa6\xf4\x15\xc1\x2e\xbd\x0b\xc7\xfb\x49\x5d\x36\xf2\x4e\xcd\x2d\x7b\x32\x4b\x81\xb2\x51\x04\x7e\x62\x08\x6a\x22\x15\x31\xbc\xb6\xf3\x6a\xa8\xb4\x95\x54\x35\xa5\xe1\x75\xe9\x7a\xea\x8b\xab\xeb\xee\x3e\x17\xbc\x6a\x30\xd1\xae\xaf\xae\x23\x84\x6d\x4e\x7c\x1d\x48\x2f\xe5\x3b\xe2\x0c\xb2\xf3\x00\x35\x81\x09\xa7\x96\xbe\x4b\xe6\x67\x4e\x40\xfd\xb2\x70\xa4\x62\x38\xce\x06\x67\xa1\x71\x15\x69\x12\xc8\x61\xba\x74\x60\x0a\x10\xa6\x4d\x09\x20\x4d\x5d\x83\x22\x25\xac\xcc\x65\x25\xb5\xb1\x50\x3d\xd2\x6f\x0a\xb4\x57\x4b\x46\x8a\xc6\x1c\x55\x2b\x6a\xd6\xa0\x2c\x3a\xbd\xa6\xf6\x66\x68\xc6\x16\x95\x9b\x00\xe7\xd3\xf9\x0a\xc2\x46\xcf\x6d\x5e\xec\x4a\x2e\x98\x6b\x07\x45\xb3\x94\x9c\xe5\x77\xa9\x31\xde\x49\x6d\x1b\x50\x0f\xe6\x6f\x50\x2b\xd0\x20\x70\x45\xb2\x84\xe1\x0a\xd2\x2e\x87\x65\xe9\x26\xd8\x68\x59\xc6\xbf\x2f\x64\xc4\x74\xb6\xe7\x11\x6f\xae\xd6\x42\x89\x8e\x92\x65\xf9\x47\x2e\x82\xae\x32\x44\xd8\x68\x60\xb8\xb0\x6e\x40\xf1\xd5\xce\x62\x73\x4d\xb1\x63\xe8\xb6\xf6\xfe\x04\xdd\x87\xdb\xed\xf9\x0a\x34\x67\x0d\x2d\xef\x37\x98\xd5\x30\x78\xa1\x30\x60\xe8\x61\x72\x6c\x64\xbb\xe6\xc5\x9a\x14\x54\x08\x69\xc8\x12\x88\x82\x4a\x6e\x80\x1d\xd6\x6f\x9f\x25\xab\xd6\xb8\xf9\x38\x26\xab\x26\x6d\xcc\x0a\xa8\x6e\x14\x54\x20\x4c\x3e\xca\xdf\x4d\xfe\x68\x0e\x03\xc2\xe8\xc8\xa8\x35\x35\x06\x94\x48\xae\x89\x59\x96\xff\x75\x7b\x7d\xf9\xe3\xdd\xff\x9e\x47\x77\x13\x7b\x9d\xab\x82\x5d\x11\x3c\x38\x61\x74\xff\x39\x42\xfb\xa8\xfe\x21\x02\x9b\xed\xfe\x7c\x61\x0e\xe1\x8e\x8f\xd7\xed\x96\xef\xeb\x03\x77\xb1\xec\x50\x87\x88\x46\x73\xde\x2d\xaa\x79\x40\xb9\x3f\x5c\xef\xc3\x33\x3d\x31\xfb\xf5\x98\x0f\xac\xc7\x30\x7a\xb6\x96\x29\x1e\x10\x6d\xc2\xcc\x87\x41\x4c\x82\xec\xbf\xeb\xb2\xdf\xef\x87\x47\xa4\xbf\xa3\x9c\xca\xff\xe9\x45\xd9\xe6\x7c\x58\x26\xff\xb1\xbc\x1f\xd9\x81\xf3\x8a\x6b\xcd\xc5\xc3\x3d\xf6\xa8\x29\x55\xbf\x70\x6d\xdc\xab\xa4\xc3\x9b\x18\x6a\x7c\x7a\xdb\x06\x47\x15\x10\x4c\x72\x6f\xad\x00\x44\x1b\xf5\x54\x29\xba\x0b\xee\xa3\x35\x7a\x49\xd6\xd3\xfa\x27\xc6\x6d\xd0\x63\xba\x31\xcf\xa1\x46\xc5\x41\xc8\x8e\xa7\x57\x1c\x1d\x4a\x6e\xfd\x22\xe0\x07\xf9\x09\x1f\xf8\xf9\xad\x9f\x8c\xe9\xf1\xc8\x9b\x34\x3d\xd6\xb4\xf6\xee\xcf\x36\xc3\xb4\x41\x60\xdf\x5b\xdf\x2c\xa1\xf9\xa8\x7c\xdd\x1f\x9d\x7f\x63\xb9\xe6\x5e\xaa\x1c\x97\x6d\x96\xf6\x5f\x9a\x6f\xf1\xcb\xa3\x2e\xe3\x18\xd7\x05\x55\x0c\xd8\x30\xe7\xc6\xbc\x3c\x3d\x76\x77\x02\x83\x41\x13\x88\xd3\x7e\x10\x31\x1a\x25\xc9\x10\x39\xd3\xbb\xbe\x35\x8c\xf8\xb6\x7d\x25\xdd\xbd\x83\x46\xac\xed\x4c\x85\x2d\xca\x3b\xf7\xe9\x17\x00\xdd\xea\x2f\xcd\xa1\xb8\x4f\x2c\xe5\xbd\xc5\x39\x61\x4e\xc6\x75\x5d\xd2\x5d\xb4\x4c\xfa\xd3\x8c\x0c\x9b\xd1\xb4\x1b\x01\x99\x1e\x78\x91\x92\xf8\xe9\xa8\x8d\xf5\xb4\xc2\x23\x46\x9d\x10\x83\x96\x8d\x2a\x60\x62\x41\x61\xf1\x4f\x02\x56\x99\xf6\x25\x7c\x0b\x0a\x87\x80\x6a\xc9\x85\x8b\xf1\x95\x54\x95\x1b\xb9\x03\x5f\xa9\x25\x37\x8a\xaa\x1d\x91\x8a\x05\x5b\x61\xb2\xc0\x0f\xca\xfb\x70\x8d\x76\x88\xbd\x31\xba\x58\x1d\x2b\xe3\xe9\x10\x68\x99\x49\xde\x08\x6e\x0e\x05\x7d\xa4\x9c\xf7\x42\x61\x64\x7e\x0a\xa3\xc0\x81\x9c\x7b\x3b\xe9\xb5\x6c\x4a\x46\xd6\x74\x03\xa4\x02\x2a\x6c\x17\x92\x6e\xa9\xd2\x51\x65\x4e\xc6\x4b\x3c\xe6\xf4\xe3\x65\x04\x8d\x0f\x96\xee\x67\x3a\x67\x35\xb3\xc6\xfe\x4b\x35\xa1\x8c\x01\x4b\x29\x1e\x34\x8b\x74\x37\x08\x00\x59\x13\x3e\x05\x07\x89\x6c\x99\xf1\xcd\xff\x80\x90\x6b\x02\x8f\x18\xd3\x3a\x0d\xa8\x6f\x89\x41\x6d\x7c\xba\x01\xed\x9f\xf8\x5d\xe7\x40\x7a\xf2\x4b\xc8\x30\xb1\x46\x2a\xd8\x2b\x12\x10\xcd\xb1\xf8\xf3\x82\x96\xe5\xce\xed\x2f\x7f\x04\x71\x7c\x44\x11\xdb\xd0\xb2\xe9\x07\x6e\xb2\x7a\x39\xc2\xc9\xaa\x62\x49\xba\xe9\x28\x38\x48\x3f\x45\x7d\x4c\x44\x85\x23\xf6\xfa\xc8\xdb\xc9\xbe\xcb\x03\x25\x49\xbf\xa7\xcb\xe5\x09\x3e\x99\x65\xfb\xd9\x7e\xf6\x77\x00\x00\x00\xff\xff\x5d\x73\xfc\x54\xd4\x1f\x00\x00")

func layoutSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_layoutSchemaJson,
		"layout.schema.json",
	)
}

func layoutSchemaJson() (*asset, error) {
	bytes, err := layoutSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layout.schema.json", size: 8148, mode: os.FileMode(0644), modTime: time.Unix(1556782322, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xae, 0xfe, 0x53, 0x53, 0xbb, 0x9b, 0x88, 0x5e, 0x5d, 0x3b, 0xa4, 0xb5, 0x83, 0x6b, 0x32, 0xd2, 0x74, 0x77, 0x3a, 0x6, 0x4e, 0xb2, 0x74, 0x42, 0x90, 0xce, 0xb8, 0x10, 0x6, 0x42, 0x4d, 0xb9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"actions.schema.json": actionsSchemaJson,

	"layout.schema.json": layoutSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"actions.schema.json": &bintree{actionsSchemaJson, map[string]*bintree{}},
	"layout.schema.json":  &bintree{layoutSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
