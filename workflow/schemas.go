// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/workflow.schema.json (8.489kB)
// schemas/workflow.schema.json.orig (8.692kB)

package workflow

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _workflowSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5b\x53\xdb\x38\x14\x7e\xe7\x57\x68\x52\x66\x7a\xd9\x5c\x98\x7d\xd9\x59\xde\x96\xc0\x2c\xec\x2c\x25\x4b\x32\xa5\x85\xa1\x9d\x13\xe7\x24\x56\x91\x25\x57\x92\x21\x6e\x97\xff\xde\xb1\x71\x14\x3b\x91\x1c\x3b\x38\x6d\xdf\x88\xf4\x9d\xfb\xc5\xe7\x88\x6f\x7b\x84\x10\xd2\xda\xa7\x93\xd6\x21\x69\xf9\x5a\x87\xea\xb0\xd7\x03\xae\x7d\xe8\x7a\x22\xe8\x3d\x08\x79\x37\x65\xe2\x41\x75\x94\xe7\x63\x00\xad\x76\x46\x90\xfd\xcc\x88\x0e\x7b\xbd\xcf\x4a\xf0\x0c\xd4\x15\x72\xd6\x9b\x48\x98\xea\xce\xc1\x1f\xbd\xa7\xb3\x17\x0b\xca\x09\x2a\x4f\xd2\x50\x53\xc1\x13\xea\x7f\x86\x17\x6f\xc9\x30\x85\x90\xa9\x90\xe4\xe9\x7a\x4c\xf9\x8c\x18\xd9\x0b\x52\x1d\x87\x98\xd0\x88\xf1\x67\xf4\xf4\xe2\x54\xe2\x97\x88\x4a\x4c\x0c\xb8\x49\x4f\xd2\xd3\x27\x96\xef\x50\xaa\x44\x50\x7a\x7e\x9b\x11\xc0\x64\x42\x13\xf1\xc0\x06\x52\x84\x28\x35\x45\xd5\x3a\x24\x53\x60\x0a\x33\x48\x98\xbf\xf8\xb6\xe4\x7a\x95\xa9\x74\x36\x29\x9c\x17\xb4\x53\x5a\x52\x3e\xcb\xb4\x33\xb7\x21\x68\x8d\x32\x35\xf9\xe3\x0d\x74\xbe\xfe\xd5\xb9\x3e\xe8\xfc\xf9\x89\x74\x6e\xdf\xec\xb7\x0c\xf4\xb1\x9d\xb3\x80\x06\x11\x83\x44\xd1\x1f\x21\xed\x1c\x35\x38\xa5\xdc\x18\x97\x93\x16\x8f\x18\x6b\xdd\xae\xca\xb3\xfb\xcb\xdc\xbf\x85\x00\xad\x37\x36\x5b\xd6\x40\x8f\x7b\xf6\x5f\x79\xfd\xcf\xf8\x3d\x72\x2d\x64\xbc\x3b\x23\x06\x0c\x34\x8e\xe2\xd0\x71\x5f\x30\x05\xa4\x84\x78\x25\x2a\x06\x44\x35\x06\x6e\x1e\x29\x64\x5f\xe2\x34\xe1\xf3\xa2\x37\xc1\x29\xe5\x69\xbe\xaa\x5e\xb8\xd0\x60\xdd\x47\xeb\x7e\x5a\x3f\xb1\x7b\xae\x58\x29\x35\x13\x0d\x79\x14\xa4\xbe\xfd\xbd\x7b\xd0\xba\xb5\xf2\xbf\xc4\x50\x28\xaa\x85\xb4\x39\xd6\x5e\xd3\xe6\x36\x0b\x49\x9c\xe4\x8f\x23\x2a\xf9\x54\x7f\x25\x13\x59\x5d\xd3\xbe\xfe\x9f\x51\xed\x47\xe3\xe4\xcf\xd7\xbd\xa2\xcf\x1e\xed\x15\x33\xd8\x90\x03\xdd\x37\xee\xd8\xdb\x63\x26\x17\xe6\xc7\xdb\x25\xf6\x09\xc3\x00\xb9\xde\xd6\x75\x4e\x4b\x7e\x6a\x22\xe3\x93\x51\xb5\x52\x79\x5d\x87\xd6\x19\x57\x1a\xb8\x57\xc5\x0e\xab\x93\x0c\x6a\x73\x9e\x2d\x0d\xf2\x44\x90\xe8\x9e\x30\x1d\xf9\x54\x11\xaa\x88\xf6\x91\x70\x08\x90\x88\x29\x01\x4e\x32\xeb\x08\xcd\xd4\x6b\x13\xec\xce\xba\xe4\x65\x10\x7f\x02\x46\xbf\x44\x42\xbf\x74\x28\x42\xca\x9b\xf7\x6f\xfb\x0e\x6f\xb9\xcc\xaa\x94\xd4\x06\x5e\x92\xdc\x4b\xf3\xcb\xe2\xb9\x88\x87\x5d\x4b\x62\x8d\xab\xfd\xb4\x34\xda\x7d\xc1\x39\x7a\xa9\xe4\x9f\x9c\xc0\x0b\x95\x96\x1a\x6d\xd9\x99\x57\x8a\x77\xf3\x88\x62\xa0\xf9\xf1\xc7\xde\x80\xfb\x82\x4f\xe9\x6c\x07\xad\xb7\x58\x0a\xb9\x12\x20\x13\xbc\xa7\x1e\x12\x8f\x81\x52\x16\xdf\x9b\xcf\x86\x3d\x2a\xfd\xf8\x88\x0a\x57\xc8\xfe\xa6\x4c\x09\x3e\xa0\x21\xea\x73\x98\x3b\x51\x4c\x8c\x81\x9d\xd3\x39\x4a\x17\xe4\x14\x02\xca\xb4\xe0\xae\xfb\x7f\x61\xec\xc5\x1a\x5d\xd7\xe9\x34\x70\x89\x30\x71\x4b\xf8\x6f\xd0\xbf\x74\xdd\x0d\x7d\xb8\x43\x79\xc6\xbd\x68\x0c\x5a\x38\x59\x8c\xd0\x03\x4b\x4e\xdd\x36\xf1\x2d\xfb\x98\x73\xd2\x7e\xe5\x0e\xda\x4c\x26\xdb\xb2\xc9\x5a\x68\x4f\x99\xd4\x4f\x13\xa9\x54\xd0\xe6\x3a\x18\xa1\xd2\xc9\x08\xd3\xc4\x80\x48\xac\x26\x9c\xd3\xf9\x08\xd4\x5d\xdf\x47\xef\xce\x81\x59\x0a\x24\xd5\x9a\x93\x93\x4b\x89\xd3\x82\x9c\x1e\xcf\x1e\x15\xd3\xbf\x1e\xcd\xf6\x66\xa4\x14\x37\xa3\xdc\x98\xd3\xf0\xa0\x72\x4c\x25\x7a\x56\xc6\x6b\x02\x9c\x0b\x84\xa5\x05\x1d\x49\xe0\x9e\xdf\x2c\xcf\xbe\x08\x02\xaa\x1b\x5b\x74\x9a\xf9\x28\xe4\x1c\x68\xaf\x8b\xfc\x30\xd6\x70\xec\xcc\xec\x1f\x3f\x73\x03\xb4\x38\x3b\x1b\x8c\x07\xa0\x9f\x13\xc5\x9d\x78\x7c\xc5\xec\x76\x51\xd9\xd2\x28\x98\x11\xaa\xe1\x48\x9c\x2c\x83\xdc\x7c\x28\xac\x8f\x07\xab\x1c\x37\xb5\xd7\xaa\xa6\x18\xdc\x7c\xf3\xb4\xba\x30\x86\x47\xc1\x18\x65\xc9\x58\x5a\x32\x8e\xbb\xfb\x4e\x7d\x31\xb5\xa6\x77\x47\xf6\x69\x19\xa1\x83\xc2\xfe\x0d\x2c\x91\xd3\x1a\x80\x84\x00\x35\xca\xea\x2b\xd4\x0f\xaa\xa1\xd5\x84\xad\x54\x35\xb9\x39\xbc\xe1\xfa\x19\x8a\x48\x5a\xaa\xd2\xdc\xdb\x3f\xc4\x9e\xd1\x67\x84\x32\xa0\x1c\x58\xb5\x82\x1a\x81\x9c\x61\xc9\x87\xe4\x19\xd2\x76\x12\xac\xcc\x3b\x6d\xa3\xb9\x3d\x5a\x16\x05\x77\xd3\xe6\x9c\x5d\x74\x4d\x4c\x9d\x36\x67\x8a\xa5\xd1\xe7\xcc\x66\xeb\xc5\x58\xde\x5e\xd5\xd7\x1e\x92\xfc\x7c\xdd\xf4\xe0\x96\xb2\xfe\xa5\xde\x66\x16\x8b\xe9\xea\xcb\xcc\xb1\x90\x54\x55\x7f\x94\xe9\x2c\x5f\x65\x5e\xbd\x26\xbf\xc4\xb3\xcc\xca\x2a\xbe\x8c\x4d\x99\xdd\x67\x3c\x8c\xf4\xf2\x59\xbb\x4b\xfa\x91\x94\xc8\x35\x8b\xdb\x04\x78\x4c\xee\x30\xee\xdd\x03\x8b\x50\x11\x90\x48\xee\x81\xd1\x09\xf1\x51\xba\x96\x62\xa3\xce\xa6\x4f\x86\xf1\xd0\x76\xcb\xc9\x2e\x5f\x4b\x0a\xbb\x53\xc3\x15\x91\x14\xa7\x8c\xea\xbd\x5c\x55\xea\x4c\x17\x91\x0e\x23\xbd\x71\xe5\xac\xc7\x74\x44\x03\x3c\x51\x9a\x06\xa0\x2b\x74\x3b\x17\x63\xd7\x5a\x99\x73\xf9\xf2\xdf\x1a\x0d\xfb\x7b\xd1\xa7\xd7\x7a\xb2\x7d\x8a\x05\x1e\x4d\xc1\xd3\x91\x44\x59\x9d\xea\x0a\x19\x1b\xfa\x10\xd6\x10\x94\x90\x9c\x16\xe1\xd9\xe4\xe8\x84\x5f\xd5\x83\x1f\x57\x87\x9f\xc3\xfc\x9d\x60\x35\xf0\x94\xd7\xc2\x1f\x09\xad\x45\xb0\x88\x6e\x1d\x9a\x9a\x2e\x7a\x5f\x0f\xfe\xa1\x1e\xfc\xba\x3a\xbc\x2f\xd8\x90\x7e\xad\x61\xee\xa5\x78\xa8\x47\x70\x8a\x74\xe6\xeb\x9a\xee\xb9\x98\x4e\x15\xd6\x24\xfa\xb0\x0d\xd1\xfb\xa1\x06\x59\x57\xd0\x16\x34\xd7\x35\x69\x4e\xe6\x5a\x42\x11\x9e\xb5\x95\x4d\x8f\x5f\x7b\x8f\x7b\xdf\x03\x00\x00\xff\xff\x39\xac\xcc\x3a\x29\x21\x00\x00")

func workflowSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_workflowSchemaJson,
		"workflow.schema.json",
	)
}

func workflowSchemaJson() (*asset, error) {
	bytes, err := workflowSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workflow.schema.json", size: 8489, mode: os.FileMode(0640), modTime: time.Unix(1556640159, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x81, 0x5f, 0x41, 0xef, 0x5a, 0x26, 0xd6, 0x14, 0xb7, 0xf2, 0x99, 0x89, 0x16, 0x6f, 0xea, 0x48, 0xe6, 0xd8, 0x25, 0x67, 0xc3, 0xc2, 0xa, 0x7c, 0x28, 0xde, 0x53, 0xc6, 0xfb, 0xc9, 0x55, 0x1f}}
	return a, nil
}

var _workflowSchemaJsonOrig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x19\x5d\x6f\xdb\x36\xf0\x3d\xbf\x82\x70\x03\xf4\x63\xb6\x55\xec\x65\x58\xb0\x0d\x68\x9c\x60\xc9\xb0\x34\x5e\x6c\x34\x6d\x82\x34\x38\xcb\x27\x8b\x8d\x44\xaa\x24\x95\x58\x6d\xf3\xdf\x07\xc9\x32\x2d\xdb\xa4\x2c\x39\x72\x5b\xbd\x34\x26\xef\xfb\x8b\x77\xd7\xaf\x7b\x84\x10\xd2\xda\xa7\xe3\xd6\x01\x69\xf9\x4a\x45\xf2\xc0\x71\x80\x29\x1f\xba\x2e\x0f\x9d\x07\x2e\xee\xbc\x80\x3f\xc8\x8e\x74\x7d\x0c\xa1\xd5\xce\x11\xf2\x9f\x39\xd2\x81\xe3\x7c\x92\x9c\xe5\x40\x5d\x2e\x26\xce\x58\x80\xa7\x3a\xaf\x7f\x73\x66\x67\xcf\xe6\x98\x63\x94\xae\xa0\x91\xa2\x9c\xa5\xd8\xff\x0c\xce\xdf\x92\x41\x06\x42\x3c\x2e\xc8\xec\x7a\x44\xd9\x84\x68\xde\x73\x54\x95\x44\x98\xe2\xf0\xd1\x27\x74\xd5\xfc\x54\xe0\xe7\x98\x0a\x4c\x15\xb8\xce\x4e\xb2\xd3\x19\xc9\x77\x28\x64\xca\x28\x3b\xbf\xc9\x11\x60\x3c\xa6\x29\x7b\x08\xfa\x82\x47\x28\x14\x45\xd9\x3a\x20\x1e\x04\x12\x73\x90\xa8\x78\xf1\x75\x41\xf5\x32\x17\xe9\x74\xbc\x74\xbe\x24\x9d\x54\x82\xb2\x49\x2e\x9d\xbe\x8d\x40\x29\x14\x99\xca\x1f\xaf\xa1\xf3\xe5\x4d\xe7\xea\x75\xe7\xf7\x5b\xd2\xb9\x79\xb5\xdf\xd2\xa0\x8f\xed\x82\x06\x34\x8c\x03\x48\x05\xfd\x1e\xdc\xce\x50\x81\x95\xcb\xb5\x36\x39\x69\xb1\x38\x08\x5a\x37\xab\xfc\xcc\xf6\xd2\xf7\x6f\x21\x44\xe3\x8d\x49\x97\x35\xa0\xc7\x3d\xf3\xaf\xa2\xfc\xa7\xec\x1e\x99\xe2\x22\xd9\x9d\x12\xfd\x00\x14\x0e\x93\xc8\x72\xbf\xa4\x0a\x08\x01\xc9\x8a\x57\x34\x10\x55\x18\xda\x69\x64\x20\xfb\x02\xbd\x94\xce\x33\x67\x8c\x1e\x65\x59\xbc\x4a\x27\x9a\x4b\xb0\x6e\xa3\x75\x3b\xad\x9f\x98\x2d\xb7\x9c\x29\x35\x03\x0d\x59\x1c\x66\xb6\xfd\xb5\xfb\xba\x75\x63\xa4\x7f\x81\x11\x97\x54\x71\x61\x32\xac\x39\xa7\xf5\x6d\xee\x92\x24\x8d\x1f\x8b\x57\x8a\xa1\xfe\x42\xa4\xbc\xba\xba\x7c\x7d\x9b\x50\xe5\xc7\xa3\xf4\xcf\x97\xce\xb2\xcd\x1e\xcd\x19\xd3\xdf\x10\x03\xdd\x57\x76\xdf\x9b\x7d\x26\xe6\xea\x27\xdb\x05\xf6\x71\x80\x21\x32\xb5\xad\xe9\xac\x9a\xfc\xd0\x40\xc6\x99\x52\xb5\x42\x79\x5d\x86\xd6\x29\x93\x0a\x98\x5b\x45\x0f\xa3\x91\x34\xd4\xe6\x38\x5b\x28\xe4\xf2\x30\x95\x3d\x25\x3a\xf4\xa9\x24\x54\x12\xe5\x23\x61\x10\x22\xe1\x1e\x01\x46\x72\xed\x08\xcd\xc5\x6b\x13\xec\x4e\xba\xe4\x79\x98\xdc\x42\x40\x3f\xc7\x5c\x3d\xb7\x08\x42\xca\x8b\xf7\x2f\xfb\x16\x6b\xd9\xd4\xaa\x14\xd4\x1a\xbc\x24\xb8\x17\xea\x97\xf9\x73\xee\x0f\xb3\x94\xc4\xe8\x57\xf3\x69\xa9\xb7\x7b\x9c\x31\x74\x33\xce\x3f\x38\x80\xe7\x22\x2d\x24\xda\xb2\x32\xaf\x24\xef\xe6\x16\x45\x83\x16\xdb\x1f\x73\x01\xee\x71\xe6\xd1\xc9\x0e\x4a\xef\x72\x2a\x14\x52\x80\x8c\xf1\x9e\xba\x48\xdc\x00\xa4\x34\xd8\x5e\x3f\x1b\x66\xaf\xf4\x92\x43\xca\x6d\x2e\xfb\x9b\x06\x92\xb3\x3e\x8d\x50\x9d\xc1\xd4\x0a\x15\xf0\x11\x04\x67\x74\x8a\xc2\x06\x72\x02\x21\x0d\x14\x67\xb6\xfb\x7f\x61\xe4\x26\x0a\x6d\xd7\x59\x37\x70\x81\x30\xb6\x73\xf8\xaf\xdf\xbb\xb0\xdd\x0d\x7c\xb8\x43\x71\xca\xdc\x78\x04\x8a\x5b\x49\x0c\xd1\x05\x43\x4c\xdd\x34\xf1\x96\x7d\x2c\x18\x69\xbf\x72\x05\x6d\x26\x92\x4d\xd1\x64\x4c\xb4\x59\x24\xf5\xb2\x40\x2a\x65\xb4\x39\x0f\x86\x28\x55\xda\xc2\xa4\xdc\xff\x98\x7d\xe4\xe4\xf8\xcd\xd1\x93\xba\xc5\x24\xd5\x87\xa4\x24\xbf\xcd\x3e\x12\xa2\x98\xe0\x98\xa4\xb9\xc1\x19\xc9\x0a\x96\xe2\x42\x6e\x93\x7b\x9a\xf6\x9f\xb3\x6f\xcb\xf7\x3f\x23\xf1\xd7\xec\x23\x1e\x82\x8a\x05\x3a\x5e\x9c\xfe\x73\x2b\x81\x51\x95\xac\x7b\xe3\x8c\x4e\x87\x20\xef\x7a\x3e\xba\x77\x39\x85\x55\x98\x85\x10\xa4\x5a\x9d\xb5\x52\x21\x76\xff\x87\x05\x39\x9e\xdc\xf5\x66\x7f\x3d\xea\x41\x54\x73\x59\x1e\xf2\x0a\x1d\x5b\xc3\x3d\xd7\x11\x15\xe8\x1a\x09\xaf\x31\xb0\xce\x42\x86\x6a\x7a\x28\x80\xb9\x7e\xb3\x34\x7b\x3c\x0c\xa9\x6a\x6c\x66\x6b\xe6\x7d\x2b\x18\xd0\x9c\xe2\xc5\xbe\xb2\x61\xdf\xe9\x31\x26\x79\xe2\x30\x6b\x30\x76\xde\xe3\xf7\x41\x3d\xc5\x8b\x3b\xb1\xf8\x8a\xda\xed\x65\x61\x4b\xbd\xa0\xbb\xc1\x86\x3d\x71\xbc\x70\x72\xf3\xae\x30\xee\x41\x56\x29\x6e\x7a\x1c\xaa\xaa\xa2\xe1\xa6\x9b\x1b\xef\xb9\x32\x2c\x0e\x47\x28\x4a\x3a\xec\x92\xc9\xc2\x5e\x77\xea\xb3\xa9\x35\x88\x58\xa2\x4f\x89\x18\x2d\x18\xe6\xe7\xbc\x84\x4f\xab\x0f\x02\x42\x54\x28\xaa\x4f\x83\xdf\x29\x87\x56\x03\xb6\x52\xd6\x14\x46\x8a\x86\xf3\x67\xc0\x63\x61\xc8\x4a\x7d\x6f\x7e\x88\x5d\x2d\xcf\x10\x45\x48\x19\x04\xd5\x12\x6a\x08\x62\x82\x25\x0f\xc9\x13\xb8\xed\xc4\x59\xb9\x75\xda\x5a\x72\xb3\xb7\x0c\x02\xee\xa6\xcc\x59\xab\xe8\x1a\x9b\x3a\x65\x4e\x27\x4b\xa3\x9b\xd9\x66\xf3\x45\x6b\xde\x5e\x95\xd7\xec\x92\xe2\xa8\xd0\x74\xe3\x96\x91\xfe\xa9\xd6\x4c\xf3\x19\x7b\x75\xc9\x74\xc4\x05\x95\xd5\xf7\x4b\x9d\xc5\x82\xe9\xc5\x4b\xf2\x53\x6c\x98\x56\xb6\x0a\x0b\xdf\x94\xe9\x7d\xca\xa2\x58\x2d\x36\xf4\x5d\xd2\x8b\x85\x40\xa6\x82\xa4\x4d\x80\x25\xe4\x0e\x13\xe7\x1e\x82\x18\x25\x01\x81\xe4\x1e\x02\x3a\x26\x3e\x0a\xdb\x7c\xaf\xc5\xd9\xf4\x64\x68\x0b\x6d\x37\x9c\xec\x72\xf1\xb3\x34\x3b\x35\x9c\x11\x69\x72\x8a\xb8\xde\x12\xae\x52\x65\x3a\x8f\x55\x14\xab\x8d\x23\x67\x3d\xa2\x43\x1a\xe2\xb1\x54\x34\x04\x55\xa1\xda\xd9\x08\xdb\xc6\xca\x82\xc9\x17\xff\x43\xd3\xb0\xbd\xe7\x75\x7a\xad\x26\x9b\xbb\x58\x60\xb1\x07\x6e\x3a\xe1\x8b\xea\x58\x97\x18\x04\x03\x1f\xa2\x1a\x8c\x52\x94\x93\x65\xf0\xbc\x73\xb4\x82\x5f\xd6\x03\x3f\xaa\x0e\x7e\x06\xd3\x77\x3c\xa8\x01\x4f\x59\x2d\xf8\x43\xae\x14\x0f\xe7\xde\xad\x83\x53\xd3\x44\xef\xeb\x81\x7f\xa8\x07\x7e\x55\x1d\xbc\xc7\x83\x01\xfd\x52\x43\xdd\x0b\xfe\x50\x0f\xe1\x04\xe9\xc4\x57\x35\xcd\x73\xee\x79\x12\x6b\x22\x7d\xd8\x06\xe9\xfd\x40\x81\xa8\xcb\x68\x0b\x9c\xab\x9a\x38\xc7\x53\x25\x60\x19\x3c\x2f\x2b\x9b\x96\x5f\x7b\x8f\x7b\xff\x07\x00\x00\xff\xff\xa8\x2a\xd9\x16\xf4\x21\x00\x00")

func workflowSchemaJsonOrigBytes() ([]byte, error) {
	return bindataRead(
		_workflowSchemaJsonOrig,
		"workflow.schema.json.orig",
	)
}

func workflowSchemaJsonOrig() (*asset, error) {
	bytes, err := workflowSchemaJsonOrigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workflow.schema.json.orig", size: 8692, mode: os.FileMode(0640), modTime: time.Unix(1556640133, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb9, 0x39, 0x9b, 0x21, 0xb3, 0xa2, 0x3, 0xef, 0x5f, 0x56, 0xcb, 0x4b, 0x9f, 0x24, 0x29, 0xd1, 0xf7, 0xb, 0x7c, 0x9b, 0x22, 0xf4, 0x3f, 0x37, 0xa, 0xc2, 0xc0, 0xb1, 0xf8, 0x33, 0xe2, 0xe8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"workflow.schema.json": workflowSchemaJson,

	"workflow.schema.json.orig": workflowSchemaJsonOrig,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"workflow.schema.json":      &bintree{workflowSchemaJson, map[string]*bintree{}},
	"workflow.schema.json.orig": &bintree{workflowSchemaJsonOrig, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
